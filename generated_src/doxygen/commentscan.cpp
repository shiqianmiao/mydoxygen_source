
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentscanYY_create_buffer
#define yy_delete_buffer commentscanYY_delete_buffer
#define yy_flex_debug commentscanYY_flex_debug
#define yy_init_buffer commentscanYY_init_buffer
#define yy_flush_buffer commentscanYY_flush_buffer
#define yy_load_buffer_state commentscanYY_load_buffer_state
#define yy_switch_to_buffer commentscanYY_switch_to_buffer
#define yyin commentscanYYin
#define yyleng commentscanYYleng
#define yylex commentscanYYlex
#define yylineno commentscanYYlineno
#define yyout commentscanYYout
#define yyrestart commentscanYYrestart
#define yytext commentscanYYtext
#define yywrap commentscanYYwrap
#define yyalloc commentscanYYalloc
#define yyrealloc commentscanYYrealloc
#define yyfree commentscanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentscanYYrestart(commentscanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int commentscanYYleng;

extern FILE *commentscanYYin, *commentscanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentscanYYrestart()), so that the user can continue scanning by
	 * just pointing commentscanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentscanYYtext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int commentscanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentscanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentscanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentscanYYrestart (FILE *input_file  );
void commentscanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentscanYY_create_buffer (FILE *file,int size  );
void commentscanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentscanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentscanYYpop_buffer_state (void );

static void commentscanYYensure_buffer_stack (void );
static void commentscanYY_load_buffer_state (void );
static void commentscanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentscanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentscanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentscanYY_scan_bytes (yyconst char *bytes,int len  );

void *commentscanYYalloc (yy_size_t  );
void *commentscanYYrealloc (void *,yy_size_t  );
void commentscanYYfree (void *  );

#define yy_new_buffer commentscanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentscanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentscanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentscanYYin = (FILE *) 0, *commentscanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentscanYYlineno;

int commentscanYYlineno = 1;

extern char *commentscanYYtext;
#define yytext_ptr commentscanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentscanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentscanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 205
#define YY_END_OF_BUFFER 206
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[825] =
    {   0,
       79,   79,  123,  123,  137,  137,  152,  152,  196,  196,
      199,  199,  143,  143,  206,  205,   46,  205,   46,  205,
       45,  205,   46,  205,   46,  205,   46,  205,   46,  205,
       44,   46,  205,   46,  205,   46,  205,   27,   46,  205,
       46,  205,   46,  205,   46,  205,   46,  205,   46,  205,
       44,   46,  205,   46,  205,   46,  205,   92,  205,   91,
      205,   92,  205,   89,   92,  205,   92,  205,   92,  205,
      205,   93,  205,  113,  205,  112,  205,  113,  205,  110,
      113,  205,  113,  205,   74,  205,   74,  205,   73,  205,
       74,  205,   74,  205,   74,  205,   70,   74,  205,   74,

      205,   74,  205,   78,  205,   77,  205,   78,  205,   75,
       78,  205,   78,  205,   78,  205,   78,  205,   82,  205,
       81,  205,   79,   82,  205,   79,   82,  205,   82,  205,
       79,   82,  205,   79,   82,  205,   82,  205,   74,  205,
       73,  205,   74,  205,   74,  205,   74,  205,   74,  205,
       74,  205,  101,  205,  100,  205,   98,  101,  205,  101,
      205,  105,  205,  104,  205,  105,  205,  105,  205,  109,
      205,  108,  205,  109,  205,  109,  205,   97,  205,   94,
      205,   97,  205,   95,   97,  205,   97,  205,   97,  205,
       60,  205,   59,  205,   60,  205,   57,   60,  205,   60,

      205,   64,  205,   64,  205,   63,  205,   64,  205,   64,
      205,   64,  205,   61,   64,  205,   64,  205,   64,  205,
       68,  205,   67,  205,   68,  205,   65,   68,  205,   68,
      205,   85,  205,   83,  205,  205,   87,  205,   88,  205,
      205,  119,  205,  118,  205,  117,  119,  205,  119,  205,
      123,  126,  205,  120,  205,  123,  126,  205,  126,  205,
      126,  205,  128,  205,  127,  205,  205,  131,  205,  131,
      205,  129,  205,  131,  205,  131,  205,  137,  141,  205,
      138,  205,  141,  205,  141,  205,  141,  205,  141,  205,
      141,  205,  116,  205,  114,  205,  116,  205,  150,  205,

      150,  205,  148,  205,  142,  150,  205,  147,  150,  205,
      150,  205,  153,  205,  152,  153,  205,  151,  205,  153,
      205,  160,  161,  205,  159,  205,  161,  205,  161,  205,
      161,  205,  171,  172,  205,  162,  205,  172,  205,  172,
      205,  172,  205,  175,  205,  173,  205,  175,  205,  179,
      205,  177,  205,  176,  179,  205,  179,  205,  182,  185,
      205,  180,  205,  183,  185,  205,  184,  185,  205,  185,
      205,  185,  205,  188,  205,  186,  205,  188,  205,  191,
      205,  190,  205,  191,  205,  189,  191,  205,  191,  205,
      194,  205,  193,  205,  194,  205,  192,  194,  205,  194,

      205,   54,   56,  205,   55,  205,   56,  205,   56,  205,
      134,  205,  133,  205,  132,  134,  205,  134,  205,   49,
       50,  205,   48,  205,   50,  205,   50,  205,  196,  198,
      205,  197,  205,  198,  205,  198,  205,  198,  205,  201,
      205,  200,  205,  199,  201,  205,  199,  201,  205,  199,
      201,  205,  201,  205,  203,  204,  205,  202,  205,  204,
      205,  143,  205,  143,  146,  205,  144,  205,  145,  205,
       43,    4,   36,   38,   40,   38,   26,   26,   18,   26,
       18,   18,   18,   18,   18,   18,   24,   25,   20,   26,
       27,   18,   18,   18,   18,   18,   18,   18,   18,   30,

       31,   36,   28,   89,   89,   90,   89,   93,  110,  110,
      111,   70,   70,   72,   70,   75,   75,   76,   75,   79,
       79,   79,   79,   79,   79,   80,   79,   98,   99,  102,
      103,  107,  106,  107,   95,   95,   96,   95,   57,   57,
       57,   58,   61,   61,   62,   61,   65,   65,   66,   83,
       84,   87,   86,  117,  123,  120,  123,  125,  125,  122,
      127,  130,  137,  140,  139,  115,  142,  147,  149,  152,
      151,  160,  171,  174,  176,  178,  182,  181,  187,  189,
      189,  192,  192,   54,  132,   49,  196,  195,  199,  199,
      199,  199,  199,  203,  143,   26,   37,   35,   42,   38,

       42,   42,   42,   38,   42,   42,   39,    7,   34,    1,
        1,    2,   18,   18,   18,   18,   22,   23,   18,   18,
       18,   20,    5,   18,   18,   18,   18,   18,   18,   18,
       32,   35,   29,   89,   89,   70,   75,   75,   79,   79,
       79,   95,   95,   57,   57,   57,   57,   61,   65,  124,
       51,   52,   53,   47,  195,   42,   42,   16,   33,    1,
       19,    2, 8198,   18,16390,   18,   18,   18,   18,   18,
       18, 8198,   18,16390,   18,   18,   18,   18,   18,   89,
       69,   75,   79,   79,   71,   95,   57,   57,   57,   65,
      124,  155,  163,   47,   15,   41,    7,   13, 8198, 8198,

       18,   18,   18,   21,   18,   18,    5, 8198,   18,   18,
       18,   89,   75,   79,   95,    3,   14,    8,   18,   18,
       21,   18,   18,   18,   18,   18,   89,   75,   79,   95,
       83,  157,  165,   18,   18,   18,   18,   18,   18,   18,
       89,   75,   79,   95,  136,  156,  154,  164,   18,   18,
       18,   18,   18,   18,   18,   89,   91,  112,   73,   75,
       77,   79,   81,  100,  104,  108,   94,   95,   59,   63,
       67,   85,   88,  118,  121,  128,  129,  135,  138,  114,
      148,  158,  159,  162,  173,  177,  180,  186,  190,  193,
      133,   48,  197,  200,  202,   10,    9,   18,   18,   18,

        5,   18,   18,  166,   12,   11,   18,   18,   18,   18,
       18,   18,  169,   17,   18,   17,   18,  170,  167,   17,
       18,  170,  168,   43
    } ;

static yyconst flex_int16_t yy_accept[1183] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   12,
       13,   13,   13,   14,   15,   16,   17,   19,   21,   23,
       25,   27,   29,   31,   34,   36,   38,   41,   43,   45,

       47,   49,   51,   54,   56,   58,   60,   62,   64,   67,
       69,   71,   72,   74,   76,   78,   80,   83,   85,   87,
       89,   91,   93,   95,   97,  100,  102,  104,  106,  108,
      110,  113,  115,  117,  119,  121,  123,  126,  129,  131,
      134,  137,  139,  141,  143,  145,  147,  149,  151,  153,
      155,  157,  160,  162,  164,  166,  168,  170,  172,  174,
      176,  178,  180,  182,  184,  187,  189,  191,  193,  195,
      197,  200,  202,  204,  206,  208,  210,  212,  214,  217,
      219,  221,  223,  225,  227,  230,  232,  234,  236,  237,
      239,  241,  242,  244,  246,  249,  251,  254,  256,  259,

      261,  263,  265,  267,  268,  270,  272,  274,  276,  278,
      281,  283,  285,  287,  289,  291,  293,  295,  297,  299,
      301,  303,  305,  308,  311,  313,  315,  318,  320,  322,
      325,  327,  329,  331,  333,  336,  338,  340,  342,  344,
      346,  348,  350,  352,  354,  357,  359,  362,  364,  367,
      370,  372,  374,  376,  378,  380,  382,  384,  386,  389,
      391,  393,  395,  397,  400,  402,  405,  407,  409,  411,
      413,  415,  418,  420,  423,  425,  427,  429,  432,  434,
      436,  438,  440,  442,  444,  447,  450,  453,  455,  458,
      460,  462,  464,  467,  469,  471,  471,  471,  471,  471,

      472,  472,  472,  473,  473,  473,  473,  473,  473,  474,
      475,  476,  476,  477,  477,  477,  477,  477,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  478,  478,  479,
      480,  481,  482,  483,  484,  485,  486,  487,  488,  489,
      491,  492,  493,  494,  495,  496,  497,  498,  499,  500,
      500,  500,  500,  500,  500,  500,  501,  502,  503,  503,
      504,  504,  504,  504,  504,  504,  505,  506,  506,  506,
      506,  507,  508,  508,  509,  510,  510,  511,  511,  511,
      512,  512,  512,  512,  512,  512,  513,  513,  513,  514,
      514,  514,  515,  515,  515,  515,  516,  516,  517,  518,

      518,  518,  518,  519,  520,  520,  521,  522,  522,  523,
      524,  525,  525,  525,  526,  526,  527,  528,  528,  528,
      528,  528,  528,  528,  528,  528,  528,  528,  528,  528,
      528,  529,  529,  530,  530,  530,  531,  531,  533,  533,
      533,  534,  534,  535,  535,  535,  536,  537,  537,  537,
      537,  538,  539,  540,  540,  540,  541,  541,  542,  542,
      543,  543,  543,  543,  543,  543,  544,  544,  544,  545,
      545,  546,  546,  546,  546,  547,  548,  548,  549,  549,
      550,  550,  551,  551,  551,  552,  552,  553,  553,  554,
      554,  555,  555,  556,  557,  558,  558,  559,  560,  560,

      561,  561,  562,  562,  562,  562,  562,  563,  563,  564,
      565,  566,  566,  566,  566,  567,  567,  567,  568,  569,
      569,  570,  570,  571,  572,  572,  572,  573,  573,  573,
      573,  574,  574,  574,  574,  574,  574,  574,  575,  575,
      576,  576,  577,  577,  578,  578,  579,  579,  579,  580,
      580,  581,  581,  582,  582,  582,  583,  583,  584,  584,
      584,  585,  585,  585,  586,  586,  587,  587,  587,  588,
      589,  589,  590,  591,  592,  593,  594,  594,  595,  595,
      596,  597,  597,  597,  597,  597,  598,  599,  600,  602,
      603,  604,  606,  607,  608,  608,  608,  608,  608,  608,

      608,  608,  608,  609,  609,  609,  609,  609,  609,  610,
      611,  612,  613,  614,  615,  616,  617,  618,  619,  619,
      620,  621,  622,  623,  624,  625,  626,  627,  628,  629,
      630,  631,  631,  631,  631,  631,  632,  633,  633,  634,
      635,  635,  636,  636,  636,  636,  636,  636,  637,  638,
      638,  639,  640,  640,  641,  641,  642,  642,  642,  642,
      642,  642,  642,  643,  643,  644,  645,  646,  647,  648,
      648,  648,  649,  649,  650,  650,  650,  650,  650,  650,
      650,  651,  651,  651,  651,  651,  651,  651,  651,  651,
      651,  651,  651,  651,  651,  651,  651,  651,  651,  651,

      651,  651,  651,  651,  651,  651,  651,  651,  652,  653,
      654,  654,  654,  655,  655,  656,  656,  656,  656,  656,
      656,  656,  656,  657,  658,  659,  659,  659,  659,  659,
      659,  659,  659,  659,  659,  659,  659,  660,  661,  662,
      663,  666,  667,  668,  668,  669,  670,  671,  671,  672,
      675,  676,  677,  678,  679,  680,  680,  680,  680,  681,
      681,  681,  682,  682,  682,  683,  684,  684,  685,  686,
      686,  686,  686,  687,  687,  688,  689,  690,  690,  690,
      691,  691,  691,  691,  691,  691,  692,  692,  692,  692,
      692,  692,  692,  692,  692,  692,  692,  693,  693,  693,

      693,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  695,  695,  695,  695,  695,  695,
      696,  696,  696,  697,  697,  697,  697,  697,  697,  699,
      699,  699,  699,  700,  702,  703,  704,  705,  706,  707,
      709,  710,  711,  712,  712,  713,  713,  713,  714,  715,
      715,  715,  715,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,

      717,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      720,  721,  722,  723,  724,  725,  726,  727,  728,  728,
      728,  729,  730,  730,  730,  730,  731,  731,  731,  731,
      731,  731,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
      732,  732,  732,  732,  733,  733,  733,  733,  733,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  735,  736,  737,  738,  739,
      740,  741,  742,  742,  742,  743,  744,  744,  744,  744,

      745,  745,  745,  745,  745,  745,  745,  745,  745,  745,
      745,  745,  745,  745,  745,  745,  745,  746,  746,  746,
      746,  746,  746,  746,  746,  746,  747,  748,  748,  748,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  750,  751,  752,  753,  754,  755,  756,  758,
      759,  760,  762,  764,  765,  766,  767,  769,  770,  771,
      772,  773,  774,  775,  776,  777,  778,  778,  779,  779,
      779,  779,  779,  779,  779,  779,  780,  781,  782,  783,
      784,  784,  784,  784,  784,  784,  785,  786,  787,  788,

      789,  790,  791,  792,  793,  794,  795,  796,  796,  796,
      797,  798,  799,  800,  801,  802,  803,  804,  804,  804,
      804,  804,  804,  804,  804,  804,  804,  804,  805,  805,
      805,  806,  807,  808,  809,  809,  810,  811,  811,  811,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      812,  812,  813,  813,  813,  813,  813,  813,  813,  814,
      814,  814,  816,  816,  818,  818,  818,  819,  820,  820,
      822,  822,  822,  823,  823,  823,  823,  823,  823,  824,
      825,  825
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,    1,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   22,   22,   22,   23,    1,   24,
        1,   25,    1,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   32,   32,   36,   37,   32,   38,   39,
       32,   40,   32,   41,   42,   32,   32,   32,   32,   32,
       43,   44,   45,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   54,   55,   32,   56,   57,   58,   59,
       60,   61,   32,   62,   63,   64,   65,   66,   67,   68,
       69,   32,   70,   71,   72,   73,    1,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74
    } ;

static yyconst flex_int32_t yy_meta[75] =
    {   0,
        1,    2,    3,    4,    5,    1,    6,    7,    8,    9,
        7,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   19,   20,   21,   22,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,    1,   24,    1,   25,   23,   23,   23,   23,
       23,   23,   23,   23,   26,   23,   23,   23,   27,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   28,
       29,   30,   31,   32
    } ;

static yyconst flex_int16_t yy_base[1416] =
    {   0,
        0,    0,    0,   73,  144,  217, 5191, 5190,  290,    0,
      364,    0,  438,  511,  584,  657,  730,    0,  804,    0,
       73,   74,   76,   79,  878,  951, 1024,    0, 1098,    0,
     1172,    0, 1246,    0,   86,   89, 1320,    0,   90,   95,
     1394,    0,  108,  122,  156,  229,   82,   94, 1468, 1542,
      169,  181,   96,  202,  242,  450,   99,  111, 1616,    0,
      241,  446,  129,  132, 1690,    0, 1764,    0,  443,  462,
      463,  475, 1838,    0,  162,  193,  519,  523, 1912,    0,
      133,  134,  178,  182, 5192, 9947, 9947,  526,  206, 5181,
     5177, 5159,  248,  525, 1981, 2039,  453, 2105, 2177,  103,

      542,  608,  681,  257,  475, 9947, 9947, 5177,  240,  555,
      922, 5180, 9947, 9947, 9947,    0,   89,  555, 9947,  615,
      619,  908, 1496, 5159,  685,  559,  267, 9947, 9947, 5174,
      621,  628, 5155, 1557, 9947, 9947, 2248,  964, 1565, 1983,
     9947, 2050,  975,  997, 1989, 2075, 5156, 1504,  708, 9947,
     9947,    0,  647, 9947, 9947, 5171,  913, 9947, 9947, 5170,
      927, 9947, 9947, 5169,  967, 1555, 2115, 9947, 9947,    0,
     2123, 1483, 9947, 2162, 2184, 2206, 2214, 5152, 2223, 1518,
      717, 9947, 9947,    0, 5156, 1531, 9947, 5155, 1994,    0,
     9947, 2056, 9947, 9947,    0, 5125,  488, 9947, 5126, 2272,

     2137, 9947,    0, 5118, 9947,  196, 9947, 5156, 5116,    0,
     9947, 9947, 5142, 5143, 5104,  146, 9947, 9947, 2228, 9947,
      491, 9947, 9947,  893, 2240, 9947,  609, 9947, 5108,    0,
     9947, 9947,  409,  449,    0, 9947, 9947,  883, 1543, 9947,
     9947, 2297, 9947, 9947,    0, 2301,    0, 9947, 9947, 9947,
     9947, 2305, 9947, 9947, 2309, 9947, 9947,    0,  181, 5104,
     9947, 9947,    0,  234, 5102,    0, 9947, 5095, 5094, 9947,
     9947,    0, 5099,    0, 9947, 5127, 5097,    0, 9947, 9947,
     5069,  166, 9947, 9947, 5123, 2307, 2316, 5094,    0, 9947,
     5093,    0,    0, 9947, 9947, 2080, 2348, 2414, 2023, 2169,

     5086, 5124, 9947,    0, 5107, 5100,    0,  126,  176, 9947,
     9947, 2487, 5098,  548, 5106,  653,   46,  448,  922,  522,
      535, 2339,  548,  579, 5071, 5055, 9947, 5102,  622, 2560,
     5044, 5051, 5064, 5055,  634,  488, 5051, 9947, 9947,    0,
      992,  884, 2103, 1526, 2233, 2027, 2344, 2234, 2365, 2632,
      574, 2242,  904,  915, 2358,  630, 2360, 2393, 1001, 9947,
     2012, 2385, 2444, 2445, 5105, 9947, 2118, 1990, 2178, 1014,
     9947, 2371, 5108, 9947,  554, 5100,  700, 5085, 1590, 9947,
     5045, 2430, 2467, 5078, 2515, 2523, 2540, 2571, 2532, 2439,
     1605, 9947, 5043, 2588, 2596, 5075, 5088, 9947, 2433, 2051,

     2436, 2366, 9947, 2559, 5086,  257, 2703, 2776, 5085, 9947,
     2595, 2053, 2604, 5084, 2476, 9947, 2617, 2549, 2660, 5065,
     2668, 2677, 2727, 2735, 2747,    0, 2800, 2752, 2822, 1513,
        0, 2561, 9947, 5028, 5077, 9947, 2604, 9947, 5026, 5075,
     9947, 2623, 9947, 5021, 5036, 9947, 2674, 2564, 2749, 2654,
     9947, 2788, 2831, 2839,    0, 2854, 5019, 2862, 2682, 9947,
     4984, 2876, 2884, 5017, 2901, 2893, 2918, 2926, 2935, 2696,
     9947, 4976, 2943, 2957,    0, 5014, 5017, 5006, 2740, 9947,
     4966, 5004, 4967, 2761, 9947, 4963,    0, 2811, 9947, 4932,
        0, 4927, 2149, 9947, 4930, 4927, 9947, 4963, 2867, 9947,

     4914,    0, 4912, 1530, 4961, 4960, 9947, 4909,    0, 9947,
     9947, 4906, 4901, 2910, 9947, 4898, 2931, 9947, 2963, 2967,
     9947, 4897, 2974, 9947, 4907, 4894,    0,  192, 4896, 4887,
        0, 4875, 4881, 4885,  215, 4874, 2978, 9947, 4872,    0,
     2982, 9947, 4871,    0, 2986, 9947, 4870, 2990, 9947, 4869,
      881, 4916,  896, 4892, 4857,  924, 4904,  974, 4888, 4849,
        0, 4892,  596,    0, 4834,    0,  461, 4831,    0,    0,
     4830, 4868, 2983, 4867, 2992, 3002, 4824,    0, 4822,    0,
     4826, 4820, 4853,    0, 4855,  643, 4846, 9947, 9947, 4841,
     3025, 4809, 4013, 9947, 4013,   79, 3978, 3957,  576, 1577,

      652, 2458, 9947,  102,  869, 1462, 3963, 3956, 3990,  986,
     3050,    0, 1595, 2709, 2049, 2016, 9947, 9947,    0, 3025,
     2380, 2099,    0,    0, 2912, 3056, 3058, 3060, 3062, 3071,
     3072, 3084, 2487, 3060, 3109, 9947, 3125, 3133, 2610, 3099,
     3121, 3134,    0, 3943, 3156, 3165, 3939, 3963, 3153, 3156,
     3164,  699, 3219, 3192, 3227, 3242, 3957, 3129, 3161, 3908,
     3906, 3895, 3183, 3195, 3250, 3278, 3189, 3304, 3312, 3894,
     3888,    0,    0, 3918, 3874, 3853, 3851, 3849, 3844,    0,
        0, 3838, 3827, 3815, 3819, 3804, 3803, 3799, 3774, 3762,
     3769, 3750, 3752, 3751, 2949, 3727, 3734, 3729, 3716, 3711,

     3709, 3705, 3701,    0, 3700,    0, 3695, 9947, 9947, 9947,
     3690, 3714, 2636, 3682,    0, 3640, 3636, 3634, 2225, 3632,
     3666,    0, 3240, 2718, 9947, 1466, 3609, 3604, 1473, 3636,
     3249, 1977, 3254, 2003, 3610, 3598, 9947, 2782, 9947,    0,
     3335, 2992, 3273, 3559, 3183, 3089, 3051, 3579, 3103, 3409,
     3434, 3440, 3441, 3442, 3446, 3453, 3470, 3486, 3448, 3557,
     3511, 9947, 3515, 3555, 3503, 3562, 3635, 3535, 9947, 3553,
     3545, 3537, 3511,    0, 3588, 3661, 3615, 3530, 3524, 3564,
     3514, 3507, 3502, 3493, 3492,    0, 3486, 3485, 3484, 3636,
     3480, 3478, 3474, 3473, 3472, 3456, 9947, 3450, 3447, 3444,

     9947, 3434, 3422, 3400, 3400, 3398, 3391, 3390, 3271, 3270,
     3260, 3253, 3252, 3070, 3251, 3245, 3244, 3243, 3236, 9947,
     3266, 3305, 9947, 3252, 3229, 3214, 3435, 3436, 9947, 2068,
     3208, 3201,    0, 3283, 3457, 3472, 3171, 3495, 3533, 3708,
     3544, 3554, 3694, 3598, 3717, 3189, 3179, 3723, 3740, 3171,
     3165, 3158, 3725, 3783, 3156, 3154, 3152, 3138, 3135, 3133,
     3126, 3113, 3103, 3095, 3085, 3077, 3069, 3082, 1942, 3060,
     3055, 3242, 3034, 3039, 3034, 3033, 3032, 3024, 3019, 3002,
     3006, 1437, 2983, 2993, 2990,  434, 2977, 2965, 2945, 2939,
     2935, 2931, 2927, 2922, 2920, 2913, 2912, 2904, 2899, 2924,

     9947, 2879, 2887, 3523, 9947, 2907, 3597, 2870, 2863, 3623,
     3463, 9947, 3624, 3752, 3768, 3770, 3788, 3776, 2870, 2861,
     3779, 3803, 2860, 2853, 2852, 3812, 3841, 3863, 2844, 2843,
     2842, 9947, 2825, 2820, 2813, 2812, 2807, 2802, 2789,  844,
     2780, 2773, 2771, 2780, 2776, 2765, 2755, 2765, 2753, 2761,
     2750, 2749, 2748, 9947, 2739,    0,    0, 2731, 9947, 2707,
     3499, 2707, 2700, 2686, 2686, 2677, 2676, 2658, 2654, 2648,
     2646, 2642, 2640, 2627, 2620, 2619, 2618, 2612, 2596, 2589,
     2620, 3625, 2580, 2562, 3650, 3641, 3806, 3811, 3831, 3836,
     3837, 3830, 2559, 2557, 3871, 3884, 2555, 2548, 2534, 3877,

     2533, 2519, 2517, 2486, 2477, 2467, 2461, 2460, 2459, 2463,
     2461,    0, 2451, 2456, 2422, 2415, 9947, 2426, 2416, 2397,
     2383, 2375, 2374, 2364,    0, 9947, 9947, 2355, 2362, 9947,
     2365, 2349, 2340, 2339, 2335, 2331, 2329, 2322, 2318, 2316,
     2314, 2299, 2292, 2290, 2288, 2286, 2280, 2277, 2263, 2298,
     2292, 3698, 3835, 3813, 3874, 3896, 3903, 3908, 3893, 9947,
     9947, 3901, 3907, 9947, 9947, 9947, 3904, 9947, 9947, 9947,
     9947, 9947, 9947, 9947, 9947, 9947, 2255, 9947, 2249, 2237,
     2242, 2231, 2242, 2236, 2217, 9947, 9947, 9947, 9947, 9947,
     2213, 2209, 3666, 2214, 2212, 9947, 9947, 9947, 9947, 9947,

     9947, 9947, 9947, 9947, 9947, 9947, 9947, 2231, 2226, 9947,
     9947, 3929, 3933, 3939, 2077, 3951, 3952, 2180, 2161, 2154,
     2155, 2149, 2141, 2147, 2133, 2125, 2116, 9947, 2108, 2105,
     9947, 9947, 3953, 3957,  634, 3962, 3966, 2079, 2043, 2029,
     1968, 1964, 1948, 1935, 1919, 1564, 3671, 1546, 1507, 3967,
     2037, 3971, 1503, 1434,  948,  914,  872,  573, 9947, 3672,
      549, 3972, 1537, 3973,  507,  496, 3977, 9947,  437, 3979,
     1451,  224, 3983,  179, 1482,  111, 3984, 2114, 9947, 3988,
     9947, 4032, 4064, 4096, 4128, 4160, 4192, 4224, 4256, 4288,
     4320, 4352, 4384, 4416, 4448, 4480, 4512, 4544, 4576, 4608,

     4640, 4672, 4704, 4736, 4768, 4800, 4832, 4857, 4877, 4894,
     4915, 4934, 4955, 4986, 5012, 5044, 5054, 5071, 5102, 5133,
     5164, 5196, 5222, 5254, 5281, 5312, 5343, 5374, 5392, 5424,
     5456, 5488, 5514, 5524, 5555, 5586, 5617, 5648, 5658, 5675,
     5693, 5725, 5743, 5775, 5807, 5838, 5855, 5887, 5919, 5950,
     5977, 6009, 6027, 6059, 6069, 6086, 6096, 6113, 6145, 6163,
     6195, 6227, 6247, 6267, 6287, 6319, 6351, 6377, 6408, 6418,
     6433, 6453, 6466, 6493, 6503, 3974, 6522, 6548, 6575, 6601,
     6627, 6659, 6676, 6701, 6732, 6763, 6794, 6826, 6841, 6873,
     6899, 6925, 6957, 6989, 7016, 7042, 7073, 7104, 7135, 7167,

     7198, 7216, 7248, 7280, 7312, 7338, 7364, 7395, 7405, 7436,
     7467, 7498, 7529, 7544, 7561, 7586, 7604, 7636, 7654, 7686,
     7718, 7743, 7761, 7793, 7825, 7856, 7883, 7915, 7933, 7965,
     7982, 8007, 8024, 8049, 8081, 8099, 8131, 8163, 3982, 8183,
     8203, 8223, 8243, 8275, 8307, 8322, 8354, 8372, 8387, 8414,
     8446, 8477, 3993, 8503, 8530, 4000, 4843, 8561, 8582, 8608,
     8618, 8650, 8665, 8691, 8717, 8749, 8776, 8803, 8835, 8866,
     8892, 8918, 8949, 8980, 9011, 9026, 9036, 9053, 9063, 9078,
     9110, 9120, 9130, 4848, 9162, 9180, 9197, 9224, 4871, 9255,
     9282, 9292, 9318, 9344, 9367, 9399, 9425, 9457, 9484, 9510,

     9520, 9551, 9582, 9599, 9614, 9632, 9659, 9691, 9722, 9754,
     9786, 9818, 9850, 9882, 9914
    } ;

static yyconst flex_int16_t yy_def[1416] =
    {   0,
     1182, 1182, 1181,    3, 1183, 1183, 1184, 1184, 1181,    9,
     1181,   11, 1185, 1185, 1186, 1186, 1181,   17, 1181,   19,
     1187, 1187, 1188, 1188, 1189, 1189, 1181,   27, 1181,   29,
     1181,   31, 1181,   33, 1190, 1190, 1181,   37, 1191, 1191,
     1181,   41, 1192, 1192, 1193, 1193, 1194, 1194, 1195, 1195,
     1196, 1196, 1197, 1197, 1198, 1198, 1199, 1199, 1181,   59,
     1200, 1200, 1201, 1201, 1181,   65, 1181,   67, 1202, 1202,
     1202, 1202, 1181,   73, 1203, 1203, 1204, 1204, 1181,   79,
     1205, 1205, 1206, 1206, 1181, 1181, 1181, 1181, 1181, 1207,
     1208, 1209, 1209, 1210, 1181, 1211, 1212, 1213, 1181, 1181,

     1209, 1209, 1210, 1209, 1181, 1181, 1181, 1214, 1215, 1215,
     1215, 1216, 1181, 1181, 1181, 1217, 1218, 1181, 1181, 1181,
     1181, 1219, 1219, 1181, 1220, 1181, 1221, 1181, 1181, 1222,
     1223, 1223, 1181, 1223, 1181, 1181, 1224, 1225, 1225, 1225,
     1181, 1225, 1181, 1181, 1226, 1226, 1181, 1227, 1228, 1181,
     1181, 1229, 1181, 1181, 1181, 1230, 1181, 1181, 1181, 1231,
     1181, 1181, 1181, 1232, 1233, 1233, 1233, 1181, 1181, 1234,
     1235, 1181, 1181, 1181, 1181, 1236, 1236, 1181, 1237, 1181,
     1238, 1181, 1181, 1239, 1240, 1181, 1181, 1241, 1181, 1242,
     1181, 1181, 1181, 1181, 1243, 1181, 1244, 1181, 1245, 1181,

     1246, 1181, 1247, 1181, 1181, 1181, 1181, 1248, 1181, 1249,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1250, 1181, 1181, 1250, 1181, 1181, 1181, 1181, 1181, 1251,
     1181, 1181, 1181, 1181, 1252, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1253, 1181, 1254, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1255, 1256, 1181,
     1181, 1181, 1257, 1258, 1181, 1259, 1181, 1181, 1181, 1181,
     1181, 1260, 1181, 1261, 1181, 1181, 1181, 1262, 1181, 1181,
     1181, 1181, 1181, 1181, 1263, 1264, 1265, 1181, 1266, 1181,
     1181, 1267, 1267, 1181, 1181, 1181, 1268, 1268, 1181, 1181,

     1181, 1269, 1181, 1270, 1271, 1272, 1273, 1181, 1272, 1181,
     1181, 1274, 1272, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1275, 1268,
     1275,  330,  330,  330,  330,  330,  330, 1181, 1181, 1276,
     1277, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1278, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1272, 1181, 1181,
     1272, 1272, 1181, 1181, 1279, 1181, 1280, 1281, 1280, 1181,
     1181, 1280, 1282, 1181, 1283, 1284, 1283, 1181, 1181, 1181,
     1181, 1181, 1285, 1181, 1285, 1286, 1287, 1285, 1286, 1288,
     1181, 1181, 1181, 1287, 1287, 1289, 1290, 1181, 1291, 1292,

     1291, 1181, 1181, 1291, 1293, 1293, 1294, 1294, 1293, 1181,
     1295, 1296, 1295, 1293, 1181, 1181, 1295, 1181, 1297, 1181,
     1297, 1298, 1299, 1297, 1181, 1300, 1298, 1299, 1299, 1301,
     1302, 1181, 1181, 1181, 1303, 1181, 1181, 1181, 1181, 1304,
     1181, 1181, 1181, 1181, 1305, 1181, 1306, 1307, 1306, 1181,
     1181, 1306, 1308, 1181, 1309, 1308, 1181, 1310, 1181, 1181,
     1181, 1181, 1311, 1181, 1311, 1312, 1313, 1311, 1312, 1181,
     1181, 1181, 1313, 1313, 1314, 1315, 1316, 1315, 1181, 1181,
     1181, 1317, 1181, 1181, 1181, 1181, 1318, 1181, 1181, 1181,
     1319, 1181, 1320, 1181, 1321, 1181, 1181, 1322, 1181, 1181,

     1181, 1323, 1181, 1181, 1324, 1324, 1181, 1181, 1325, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1326, 1181, 1326, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1327, 1181, 1181, 1181,
     1328, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1329,
     1181, 1181, 1181, 1330, 1181, 1181, 1181, 1181, 1181, 1181,
     1331, 1332, 1331, 1181, 1181, 1333, 1334, 1333, 1181, 1181,
     1335, 1181, 1181, 1336, 1181, 1337, 1181, 1181, 1338, 1339,
     1181, 1340, 1341, 1342, 1341, 1343, 1181, 1344, 1181, 1345,
     1181, 1181, 1346, 1347, 1348, 1181, 1349, 1181, 1181, 1349,
     1350, 1349, 1348, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1351, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1352,
     1352, 1353, 1181, 1354, 1354, 1354, 1181, 1181, 1355, 1354,
     1354, 1354, 1356, 1357, 1358, 1358, 1358, 1358, 1358, 1358,
     1358, 1181, 1181, 1181, 1181, 1181, 1349, 1181, 1181, 1359,
     1359, 1360, 1361, 1181, 1362, 1362, 1181, 1363, 1364, 1364,
     1365, 1181, 1366, 1367, 1367, 1368, 1369, 1181, 1370, 1181,
     1181, 1181, 1371, 1371, 1372, 1373, 1374, 1375, 1375, 1181,
     1181, 1376, 1377, 1378, 1181, 1181, 1181, 1181, 1181, 1379,
     1380, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1381, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1382, 1181, 1383, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1384, 1181, 1181, 1181, 1181, 1181,
     1385, 1386, 1387, 1181, 1181, 1181, 1181, 1181, 1181, 1388,
     1388, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1389,
     1181, 1390, 1390, 1391, 1390, 1390, 1390, 1392, 1393, 1393,
     1393, 1393, 1393, 1393, 1393, 1181, 1181, 1394, 1395, 1181,
     1396, 1181, 1396, 1181, 1397, 1398, 1398, 1399, 1181, 1181,
     1181, 1181, 1400, 1401, 1402, 1402, 1403, 1181, 1181, 1404,
     1181, 1181, 1181, 1181, 1181, 1405, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1406, 1387, 1181, 1181, 1181, 1181, 1181, 1407, 1181, 1181,
     1181, 1181, 1408, 1408, 1390, 1390, 1181, 1390, 1393, 1392,
     1393, 1393, 1393, 1181, 1395, 1181, 1181, 1397, 1399, 1181,
     1181, 1181, 1400, 1409, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1410, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1406,

     1181, 1181, 1181, 1411, 1181, 1407, 1407, 1181, 1181, 1390,
     1390, 1181, 1390, 1393, 1393, 1393, 1393, 1395, 1181, 1181,
     1397, 1399, 1181, 1181, 1181, 1400, 1409, 1409, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1412, 1413, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1411, 1411, 1181, 1181, 1390, 1390, 1390, 1393, 1393, 1393,
     1393, 1395, 1181, 1181, 1397, 1399, 1181, 1181, 1181, 1400,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1414, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1415, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1390, 1390, 1390, 1393, 1393, 1393, 1393, 1395, 1181,
     1181, 1397, 1399, 1181, 1181, 1181, 1400, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1390, 1390, 1181, 1392, 1393, 1393, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1390, 1390, 1392, 1393, 1393, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1390,
     1392, 1393, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1390, 1392, 1393, 1181, 1181, 1181, 1181, 1181, 1181,
     1392, 1181, 1181, 1181, 1392, 1181, 1181, 1392, 1181, 1392,
        0, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181
    } ;

static yyconst flex_int16_t yy_nxt[10022] =
    {   0,
       87,   88,   89,   87,   88,   87,   90,   87,   91,   87,
       87,   87,   87,   87,   92,   87,   93,   94,   87,   92,
       92,   92,   87,   95,   87,   96,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   87,   98,   87,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   87,
       87,   87,   87,   87,   99,  155,  155,   99,  159,  156,
      156,  159,  160,  599,  218,  160,  100,  101,  191,  102,
      103,  191,  198,  104,  104,  105,  218,  198,  231,   86,

      232,  241,   86,  199,  356,  599,  376,  356,  199,  206,
      207,  378,  206,  241,  208,  200,  157,  157,  726,  161,
      200,  233,  161,  206,  207,  219,  206,  586,  208,  192,
      586,  254,  192,  201,  254,  290,  290,  219,  201,  234,
      726,  732,  242,  105,  106,  106,  107,  106,  106,  106,
      108,  209,  106,  106,  242,  106,  106,  106,  211,  106,
      212,  106,  110,  732,  275,  209,  110,  106,  106,  213,
      227,  228,  255,  227,  214,  255,  291,  291,  276, 1012,
      293,  215,  227,  228,  293,  227,  106,  111,  106,  294,
      295,  513,  587,  294,  295,  275,  512,  504,  552,  216,

      504,  307,  505,  554,  231,  277,  232,  299,  300,  276,
      299,  571,  229,  106,  106,  106,  106,  106,  106,  107,
      106,  106,  106,  108,  229,  106,  106,  233,  106,  106,
      106,  211,  106,  212,  106,  110,  277, 1177,  570,  110,
      106,  106,  213,  248,  236,  234,  237,  214,  690,  301,
      691,  557,  249,  250,  215,  308,  559,  368,  369,  106,
      111,  106,  369,  652,  309,  697,  251,  238,  394,  394,
      394,  394,  216,  307,  361,  395,  362,  362,  362,  698,
     1176,  409,  307,  369,  252,  239,  106,  106,  106,  106,
      114,  114,  115,  114,  114,  114,  114,  114,  116,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  114,  118,  114,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  114,
      114,  114,  114,  117,  119,  120,  121,  120,  120,  119,
      119,  119,  122,  119,  119,  119,  119,  119,  119,  119,
      119,  123,  119,  119,  119,  119,  124,  119,  119,  119,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,  125,  125,  125,  119,  126,  119,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  119,  119,  119,  127,  125,  128,  128,
      129,  128,  128,  128,  130,  267,  128,  128,  248,  128,
      128,  128,  236,  128,  237,  128,  132,  249,  250,  528,
      132,  133,  128,  529,  267,  267,  712,  306,  268,  306,
      306,  251,  306,  306,  306,  238,  363,  267,  307,  363,
      128,  134,  128,  600,  964,  713,  268,  268,  269,  252,
      494,  364,  517,  239,  530,  517, 1174,  355,  965,  528,

      269,  495,  518,  529,  600,  268,  269,  128,  128,  128,
      128,  128,  128,  129,  128,  128,  128,  130,  269,  128,
      128,  279,  128,  128,  128,  279,  128,  296,  128,  132,
      296,  496,  280,  132,  133,  128,  280,  310,  620,  306,
      311,  306,  312,  356,  281,  355,  356,  621,  281,  594,
      307,  297,  594,  128,  134,  128,  379,  380,  601,  379,
      391,  392,  282,  391, 1012, 1172,  282,  307,  314,  298,
      600,  376, 1181,  369,  606,  356,  378,  369,  356,  601,
      128,  128,  128,  128,  135,  135,  136,  135,  135,  135,
      137,  600,  135,  135,  606,  135,  135,  135,  369,  135,

      381,  135,  139, 1169,  393,  729,  139,  140,  141,  357,
      523,  524,  357,  523,  600,  308,  382,  382,  382,  382,
      382,  382,  382,  382,  358,  729,  135,  142,  135, 1167,
      355,  356,  383,  307,  356,  600,  383,  384,  400,  401,
      709,  384,  617,  401,  586, 1181,  401,  586,  432,  433,
      401,  432,  525,  135,  135,  135,  135,  135,  135,  136,
      135,  135,  135,  137,  401,  135,  135,  710,  135,  135,
      135,  401,  135,  611,  135,  139,  618,  624,  355,  139,
      140,  141,  359,  360,  600,  359,  382,  382,  382,  382,
     1151,  596,  434,  310,  612,  306,  311,  306,  312,  135,

      142,  135,  383,  619,  600,  410,  307,  384,  390,  428,
      428,  428,  428,  596,  597,  598,  429,  376,  473,  473,
      473,  473,  378,  410,  314,  474,  135,  135,  135,  135,
      119,  143,  144,  143,  143,  119,  119,  119,  145,  119,
      119,  119,  119,  119,  119,  119,  119,  146,  119,  119,
      119,  119,  147,  119,  119,  119,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  119,  126,  119,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  148,  119,

      119,  119,  149,  148,  150,  150,  151,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  150,  153,  150,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  150,  150,  150,  150,  152,  162,  162,
      163,  162,  162,  162,  164,  613,  162,  162,  613,  162,
      162,  162, 1011,  162, 1181,  162,  166, 1181,  552,  733,

      166,  162,  162,  554, 1181,  359,  360, 1012,  359,  382,
      382,  382,  382,  552,  437,  438,  385,  437,  554,  733,
      162,  167,  162,  370,  371,  383,  370,  624,  442,  443,
      384,  442,  633,  532,  634,  634,  634,  533, 1012, 1181,
      369,  557,  600,  534,  369,  535,  559,  162,  162,  162,
      162,  162,  162,  163,  162,  162,  162,  164,  439,  162,
      162,  600,  162,  162,  162,  369,  162,  372,  162,  166,
      410, 1012,  444,  166,  162,  162,  418,  418,  418,  418,
      387,  412,  413,  600,  448,  449,  413,  738,  410,  449,
      738,  557,  419,  162,  167,  162,  559,  420,  418,  418,

      418,  418,  359,  360, 1166,  359,  306,  413,  306,  306,
      449,  306,  306,  306,  419,  370,  371,  307,  370,  420,
      162,  162,  162,  162,  168,  168,  169,  168,  168,  168,
      168,  168,  170,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  168,  172,  168,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  168,  168,  168,  168,  171,  173,  174,

      175,  174,  174,  173,  173,  173,  176,  173,  173,  173,
      173,  173,  173,  173,  173,  177,  173,  173,  173,  173,
      178,  173,  173,  173,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      173,  180,  173,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  173,  173,  173,
      181,  179,  182,  182,  183,  182,  182,  182,  182,  182,
      184,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  185,  185,

      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  182,  186,  182,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  182,  182,  182,  182,  185,   86,   86,  187,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,   86,  189,
       86,  188,  188,  188,  188,  188,  188,  188,  188,  188,

      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,   86,   86,   86,   86,  188,
      193,  193,  194,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  193,  196,  193,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  195,  195,  195,  193,
      193,  193,  193,  195,   86,   86,  202,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,   86,  204,   86,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,  203,  203,  203,  203,  203,  203,  203,
      203,  203,  203,   86,   86,   86,   86,  203,  220,  221,
      222,  220,  221,  220,  220,  220,  220,  220,  220,  223,
      220,  220,  220,  220,  459,  460,  220,  459,  959,  734,
      220,  220,  220,  220,  624,  960,  824,  388,  388,  388,

      388, 1175, 1012,  827,  385,  425,  418,  418,  425,  734,
      220,  225,  220,  383,  658,  426,  824,  658,  384,  470,
      471,  419,  470,  827,  426,  624,  420,  613,  461, 1178,
      613,  504,  479,  480,  504,  479,  505,  220,  220,  220,
      220,  220,  220,  221,  222,  220,  221,  220,  220,  220,
      220,  220,  220,  223,  220,  220,  220,  220,  402,  403,
      220,  402, 1165,  472,  220,  220,  220,  220,  387,  624,
     1161, 1181, 1181,  449, 1181,  401,  481,  449,  602,  401,
      624,  602, 1181,  413,  220,  225,  220,  413,  536, 1181,
      626,  379,  380,  532,  379, 1171,  613,  533,  449,  613,

      401,  603,  404,  534, 1160,  535,  391,  392,  413,  391,
     1158,  220,  220,  220,  220,  220,  243,  243,  244,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  243,  246,
      243,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  243,  243,  243,  243,  245,
      256,  256,  257,  256,  256,  256,  256,  256,  258,  256,

      256,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  256,  256,  256,  256,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  256,  260,  256,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  256,
      256,  256,  256,  259,  261,  261,  262,  261,  261,  261,
      261,  261,  263,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,

      264,  264,  264,  264,  264,  264,  261,  265,  261,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  264,  264,  264,  264,
      264,  264,  264,  261,  261,  261,  261,  264,  270,  270,
      271,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      270,  273,  270,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  270,  270,  270,
      270,  272,  283,  283,  284,  283,  283,  283,  283,  283,
      283,  283,  283,  283,  283,  283,  285,  283,  285,  286,
      285,  285,  285,  285,  285,  283,  283,  283,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  283,  288,  283,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  283,  283,  283,  283,  287,  315, 1012,  943,  414,
      418,  418,  418,  418, 1157,  484,  485,  421,  484,  316,

     1181,  413, 1156,  600,  944,  413,  419,  410,  641,  317,
      318,  420,  641,  639,  319,  320,  639,  613,  321,  322,
      613,  323,  324,  600,  299,  300,  413,  299,  613,  317,
      318,  613, 1012,  641,  319,  320, 1012,  307,  830,  486,
      321,  322,  325,  326,  323,  324,  327,  327,  327,  327,
      613,  415,  416,  613,  415,  328, 1181,  488,  489,  830,
      488,  423,  327,  327,  329,  743,  301, 1181,  413,  650,
      624,  655,  413,  650, 1181,  655,  424,  424,  424,  424,
      624,  296,  331,  421,  296,  628,  332, 1155,  333,  334,
      335, 1163,  419,  413,  650,  417,  655,  420,  600, 1154,

      613,  490,  336,  613,  613,  297,  337,  613,  338,  742,
      339,  340,  327,  327,  327,  327,  450,  451,  600,  450,
     1181,  328, 1135,  298,  454,  454,  454,  454,  327,  327,
      331,  455, 1181,  449, 1153,  368,  369,  449,  499,  500,
      369,  499,  456,  456,  456,  457,  624,  423,  329,  747,
      343,  494,  344, 1149,  345,  346,  347,  624,  449,  625,
      452,  369,  495,  462,  462,  462,  462, 1148,  348, 1147,
      299,  300,  349,  299,  338, 1180,  339,  340,  350,  463,
      498,  350,  501, 1146,  464,  462,  462,  462,  462, 1145,
      351,  351,  496,  352,  353, 1181,  369,  354,  354,  355,

      369,  463,  297, 1144, 1143, 1142,  464,  462,  462,  462,
      462, 1141,  301, 1140,  465,  468,  468,  468,  468, 1139,
      298,  369,  465,  463,  462,  462,  462,  462,  464,  514,
      515,  463,  514,  739,  613,  613,  464,  613,  613, 1138,
      463,  520,  521,  357,  520,  464,  357,  355,  405,  405,
     1132,  405,  405,  405,  406, 1131,  405,  405,  632,  405,
      405,  405, 1130,  405,  355,  405,  408,  739, 1129, 1127,
      408,  405,  409,  516, 1126, 1125,  624,  624,  467,  497,
      497,  497,  497,  627,  629,  522,  467, 1124, 1123, 1122,
      405,  408,  405,  630,  739,  497,  497,  498,  537,  538,

     1121,  537,  541,  542, 1120,  541,  545,  546, 1119,  545,
      548,  549,  355,  548, 1118,  497, 1111,  405,  405,  405,
      405,  574, 1110,  574,  573,  574,  574,  574,  574,  574,
      572, 1109,  572,  573,  572,  572,  572,  572,  572, 1108,
      602,  300,  539,  602,  497,  613,  543, 1107,  613, 1106,
      547, 1105,  617, 1104,  550,  327,  327,  327,  327,  363,
     1103,  357,  363,  603,  357,  604,  613,  402,  403,  613,
      402,  327,  327,  581,  364, 1102,  364, 1101,  605, 1100,
      355,  613,  355, 1099,  613,  604,  618,  624,  368,  369,
     1098,  327, 1097,  369,  635,  636, 1096,  635,  334,  335,

      605, 1095,  361, 1094,  362,  362,  362, 1093,  624,  637,
      307, 1092, 1091,  619,  369,  638, 1090,  338,  307,  339,
      340,  327,  327,  327,  327,  524,  631,  642,  355,  746,
      355,  382,  382,  382,  382, 1088, 1087,  327,  327,  327,
      646,  646,  646,  646, 1086,  363,  363,  383,  363,  363,
      400,  401,  384, 1181,  401,  401, 1085,  581,  401,  731,
      364,  632,  731,  638,  334,  335,  355,  355,  388,  388,
      388,  388, 1084, 1083, 1082,  385,  401,  415,  416,  401,
      415, 1081,  603,  338,  383,  339,  340,  588,  639,  384,
      588,  639,  588,  588,  588,  588,  588,  588,  588,  589,

      588,  590,  588,  590,  591,  588, 1080, 1079, 1077,  588,
      588,  588,  593, 1012,  355,  355, 1181, 1181, 1181, 1181,
     1076, 1075, 1074, 1181,  382,  382,  382,  382, 1073,  588,
      588,  588, 1181,  382,  382,  382,  382, 1181, 1072,  387,
      383,  394,  394,  394,  394,  384,  390, 1071,  395,  383,
      418,  418,  418,  418,  384,  390,  588,  588,  588,  588,
      588,  613,  432,  433,  613,  432,  419, 1181, 1181, 1181,
     1181,  420,  388,  388,  388,  388,  400,  401, 1070,  385,
     1069,  401,  664, 1181, 1181, 1181,  664, 1181,  383,  394,
      394,  394,  394,  384, 1068, 1066,  395, 1181, 1181, 1181,

     1181,  410,  401, 1181, 1181,  437,  438,  664,  437, 1065,
     1181,  639,  412,  413,  639,  651, 1064,  413, 1061,  410,
     1060, 1181,  413,  410,  442,  443,  413,  442, 1181, 1181,
     1051, 1181, 1181,  350,  412,  413,  350,  814,  413,  413,
      814,  410, 1050,  387,  905,  351,  351,  413,  352,  353,
     1049, 1048,  354,  354,  355,  450,  451,  297,  450, 1047,
      413,  424,  424,  424,  424, 1046, 1045, 1044,  421, 1181,
     1181, 1181, 1181,  656, 1043,  298, 1181,  419,  425,  418,
      418,  425,  420,  459,  460, 1181,  459, 1042,  426, 1041,
     1181,  448,  449, 1040,  419, 1039,  449,  470,  471,  420,

      470, 1038,  355,  405,  405, 1037,  405,  405,  405,  652,
      613,  405,  405,  613,  405,  405,  405,  449,  405,  823,
      653,  408,  823, 1036, 1035,  408,  405,  409,  428,  428,
      428,  428,  423, 1034, 1033,  429,  424,  424,  424,  424,
     1181,  479,  480,  421,  479,  405,  408,  405,  425,  418,
      418,  425,  419,  428,  428,  428,  428,  420,  426, 1032,
      429,  741,  484,  485,  419,  484, 1181,  449, 1031,  420,
     1029,  449,  405,  405,  405,  405,  405,  405, 1028,  405,
      405,  405,  652,  738,  405,  405,  738,  405,  405,  405,
     1025,  405,  449,  405,  408, 1024, 1023, 1022,  408,  405,

      405,  425,  418,  418,  425,  448,  449,  423, 1021, 1020,
      449,  426,  488,  489, 1019,  488, 1018,  419,  405,  408,
      405, 1017,  420, 1181, 1181, 1181, 1181, 1016, 1012, 1015,
     1181,  449,  454,  454,  454,  454, 1014, 1013, 1010,  455,
      454,  454,  454,  454,  665,  405,  405,  405,  405, 1009,
      456,  456,  456,  457, 1008,  454,  454,  454,  454, 1007,
     1006,  457,  455,  454,  454,  454,  454, 1005,  499,  500,
      455,  499, 1004,  456,  456,  456,  457,  462,  462,  462,
      462,  668,  668,  668,  457,  468,  468,  468,  468, 1003,
     1002, 1001,  465,  463,  462,  462,  462,  462,  464,  999,

      998,  463, 1181, 1181, 1181, 1181,  464,  997,  994, 1181,
      463,  514,  515,  613,  514,  464,  613,  993, 1181,  473,
      473,  473,  473, 1181,  984,  983,  474,  468,  468,  468,
      468,  829,  517,  980,  465,  517,  462,  462,  462,  462,
      979,  722,  518,  463,  473,  473,  473,  473,  464,  978,
      801,  474,  463,  801,  977,  624,  467,  464, 1181, 1181,
     1181, 1181,  976,  975, 1181, 1181,  749, 1181,  520,  521,
      974,  520,  973, 1181, 1181,  523,  524,  972,  523,  537,
      538,  971,  537,  541,  542,  970,  541,  545,  546,  969,
      545,  548,  549,  613,  548,  968,  613,  574,  467,  574,

      573,  574,  574,  574,  574,  574,  574,  802,  574,  573,
      574,  574,  574,  574,  574,  967,  572,  525,  572,  573,
      572,  572,  572,  572,  572,  588,  613,  966,  588,  613,
      588,  588,  588,  588,  588,  588,  588,  589,  588,  590,
      588,  590,  723,  588,  963,  962,  961,  588,  588,  588,
      593,  738,  613,  835,  738,  613,  958,  613,  739,  613,
      613,  613,  613,  613,  613,  957,  613,  588,  724,  588,
      956,  814,  613,  613,  814,  613,  613,  633,  955,  634,
      634,  634,  953,  952,  951,  635,  636,  745,  635,  950,
      613,  949,  739,  613,  588,  588,  588,  588,  588,  624,

      756,  624,  838,  624,  613,  624,  638,  613,  750,  752,
      635,  636,  946,  635,  624,  624,  368,  641,  751,  739,
      754,  641,  755,  945,  753,  757,  635,  636,  942,  635,
      658,  638,  941,  658,  635,  636,  940,  635, 1181,  641,
      426,  758,  641,  641,  939,  938,  624,  638,  741,  757,
      307,  368,  369,  937,  638,  638,  369,  761,  761,  761,
      761,  839,  658,  936,  641,  658,  763,  763,  763,  763,
      400,  650,  426, 1181,  650,  650,  935,  369,  650,  638,
      762,  400,  401,  934,  613,  933,  401,  613,  759,  762,
      777,  777,  777,  777,  932,  638,  650,  455,  410,  650,

      448,  664,  931,  638,  930,  664,  929,  401,  925,  412,
      655,  457, 1181,  664,  655,  924,  410,  664,  765,  405,
      405,  923,  405,  405,  405,  652,  664,  405,  405,  920,
      405,  405,  405, 1181,  405,  655,  405,  767,  664,  919,
      912,  767,  405,  405, 1181,  655,  741,  909,  410,  655,
      731, 1181,  310,  731,  306,  828,  306,  822,  828,  412,
      413,  405,  767,  405,  413,  307,  410,  448,  449,  908,
      655,  903,  449,  603,  613,  902,  901,  613,  829,  454,
      454,  454,  454,  722,  834,  413,  774,  834,  405,  405,
      405,  405,  947,  449,  899,  948,  768,  775,  775,  775,

      457,  898,  897,  896,  773,  454,  454,  454,  454,  895,
      894,  893,  455,  454,  454,  454,  454,  310,  892,  306,
      455,  306,  822,  668,  668,  668,  457,  836,  891,  890,
      307,  668,  668,  668,  457,  833,  834,  833,  833,  834,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  833,  833,  833,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  833,  833,  833,  833,  833,  833,
      834,  833,  833,  834,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  613,  904,  907,  613,  904,
      907,  613,  613,  613,  613,  613,  613,  613,  889,  888,
      613,  833,  840,  833,  635,  636,  887,  635,  613,  905,
      829,  613,  886,  885,  613,  368,  369,  613,  884,  756,
      369,  635,  636,  613,  635,  638,  613,  624,  833,  833,
      833,  833,  833,  624,  624,  624,  844,  635,  636,  624,
      635,  369,  638,  883,  842,  841,  613,  843,  882,  613,

     1030,  750,  758, 1030,  750,  881,  845,  910,  638,  880,
      879,  307,  761,  761,  761,  761,  763,  763,  763,  763,
      400,  401,  878,  638,  982,  401,  986,  982,  448,  449,
      911,  877,  876,  449,  613,  762,  875,  613,  874,  762,
      638,  410,  864,  863,  862,  613,  401,  905,  613,  913,
      861,  860,  412,  413,  449,  613,  638,  413,  613,  410,
      859,  848,  405,  405,  858,  405,  405,  405,  652,  853,
      405,  405,  857,  405,  405,  405,  624,  405,  413,  653,
      767,  477,  856,  914,  767,  405,  409,  624,  855,  454,
      454,  454,  454,  849,  915,  852,  774,  624,  907,  635,

      636,  907,  635,  851,  405,  767,  405,  775,  775,  775,
      457,  850,  916,  847,  756,  846,  777,  777,  777,  777,
      638,  829,  624,  455,  613,  613,  982,  613,  613,  982,
      837,  405,  405,  405,  405,  405,  405,  457,  405,  405,
      405,  652,  613,  405,  405,  613,  405,  405,  405,  905,
      405,  613,  405,  767,  613,  832,  831,  767,  405,  405,
      603,  826,  454,  454,  454,  454,  825, 1128,  638,  774,
     1128,  985, 1159, 1168,  820, 1159, 1168,  405,  767,  405,
      775,  775,  775,  457,  865,  866,  819,  987,  818,  867,
      817, 1053,  868,  869,  816,  613, 1052,  870,  613,  613,

      871,  872,  613,  873,  405,  405,  405,  405,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833,  833,  368,  369,  815,  624,  713,  369,
      400,  401,  448,  449,  813,  401,  410,  449,  917,  812,
      833,  833,  833,  613,  811,  810,  613,  412,  413,  809,
      369, 1112,  413,  808,  410,  807,  401,  918,  449,  613,
      806,  613,  613,  921,  613,  926,  805,  833,  833,  833,
      833,  833,  804,  413,  454,  454,  454,  454,  803,  613,
      922,  774,  613,  368,  369,  624,  400,  401,  369,  988,

      800,  401,  927,  927,  927,  457,  799,  613,  798,  410,
      613,  624,  613,  624,  613,  613,  989,  613,  796,  369,
      412,  413,  401,  992,  795,  413,  995,  410,  794,  448,
      449,  624,  613,  990,  449,  613,  613,  613,  613,  613,
      613,  613,  454,  454,  454,  454,  413,  368,  369,  774,
      996,  991,  369,  793,  624,  449, 1054,  792,  791, 1000,
      927,  927,  927,  457,  454,  454,  454,  454,  790,  789,
      741,  774, 1055,  369,  624, 1114,  300, 1056, 1114,  624,
      624,  788,  927,  927,  927,  457, 1057, 1058,  400,  401,
      410, 1059,  787,  401,  448,  449, 1113,  613,  785,  449,

      613,  412,  413,  784,  613,  783,  413,  613,  410,  613,
      368,  369,  613,  410,  401,  369,  782, 1115,  400,  401,
      449,  448,  449,  401,  412,  413,  449,  413,  781,  413,
      613,  410, 1062,  613,  613,  477,  369,  613, 1067,  624,
     1114,  300,  779, 1114,  401, 1063,  624,  449,  778,  772,
      413,  624,  613,  613,  613,  613,  613,  613,  613, 1116,
      771,  613,  770,  613, 1117,  750,  613,  613,  613,  769,
      613,  613,  613, 1170, 1170,  613, 1170, 1170, 1173, 1133,
     1170, 1173,  301, 1170, 1173, 1179,  390, 1173, 1179,  299,
      300, 1134,  299,  764,  624,  624,  623,  760,  623,  623,

      623, 1136,  741, 1150,  715,  624,  737,  715,  715,  624,
     1137,  750, 1152,  736,  624,  740,  624,  740,  740,  740,
      735,  728,  623, 1162,  623,  623,  623, 1164,  727,  725,
     1181, 1115,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  112,  112,  112,  112,

      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  205,
      205,  205,  205,  205,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  210,  210,  210,  210,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,

      226,  226,  226,  226,  226,  226,  226,  226,  226,  226,
      226,  226,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  235,
      235,  235,  235,  235,  235,  235,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,

      240,  240,  240,  240,  240,  240,  240,  240,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  266,  266,

      266,  266,  266,  266,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,

      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  302,  302,  307,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  305,  748,  307,  748,  748,  748,
      715,  307,  722,  715,  715,  584,  720,  719,  718,  305,
      717,  305,  305,  305,  573,  573,  716,  714,  305,  306,
      711,  306,  306,  740,  306,  740,  740,  740,  306,  306,

      708,  306,  306,  306,  313,  707,  313,  313,  313,  313,
      557,  313,  706,  705,  552,  313,  313,  313,  313,  313,
      313,  330,  330,  330,  704,  703,  702,  701,  700,  330,
      699,  696,  695,  694,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  693,  330,  330,  341,  692,  341,  341,
      689,  341,  526,  688,  687,  341,  341,  686,  341,  341,
      341,  342,  342,  342,  685,  684,  507,  507,  683,  342,
      682,  680,  501,  496,  342,  342,  342,  342,  342,  342,
      342,  342,  342,  679,  342,  342,  365,  365,  678,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  367,  677,
      676,  483,  675,  477,  367,  673,  367,  367,  367,  367,
      367,  477,  671,  367,  367,  367,  367,  367,  367,  463,
      670,  667,  446,  367,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  375,  662,  375,  375,
      375,  441,  661,  436,  660,  375,  377,  419,  377,  377,
      652,  652,  652,  377,  398,  377,  377,  377,  390,  647,

      383,  644,  377,  386,  386,  386,  386,  376,  643,  386,
      374,  366,  622,  616,  615,  614,  612,  386,  609,  608,
      386,  607,  595,  307,  386,  307,  386,  386,  386,  584,
      303,  582,  386,  386,  389,  389,  389,  389,  579,  577,
      573,  570,  568,  567,  565,  563,  562,  560,  389,  555,
      389,  389,  389,  526,  512,  389,  511,  389,  389,  389,
      510,  508,  507,  503,  389,  396,  396,  396,  396,  496,
      492,  396,  483,  477,  463,  446,  441,  436,  419,  398,
      398,  383,  374,  366,  307,  304,  396,  303,  396,  396,
      396, 1181,  113,  113, 1181,  396,  397,  397, 1181,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  399, 1181,
     1181, 1181, 1181, 1181,  399, 1181,  399,  399,  399,  399,
      399, 1181, 1181,  399,  399,  399,  399,  399,  399, 1181,
     1181, 1181, 1181,  399,  407,  407, 1181,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  411,  411, 1181, 1181,
     1181, 1181, 1181,  411, 1181,  411,  411,  411,  411,  411,

     1181,  411,  411,  411,  411,  411,  411,  411, 1181, 1181,
     1181, 1181,  411,  422,  422,  422,  422, 1181, 1181,  422,
     1181, 1181, 1181, 1181, 1181, 1181, 1181,  422, 1181, 1181,
      422, 1181, 1181, 1181,  422, 1181,  422,  422,  422, 1181,
     1181, 1181,  422,  422,  427,  427,  427,  427, 1181, 1181,
     1181, 1181,  427, 1181, 1181, 1181, 1181, 1181,  427, 1181,
      427,  427, 1181, 1181, 1181,  427, 1181,  427,  427,  427,
     1181, 1181, 1181, 1181,  427,  430,  430,  430,  430, 1181,
     1181,  430, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181,  430, 1181,  430,  430,

      430, 1181, 1181, 1181, 1181,  430,  431, 1181, 1181,  431,
     1181, 1181, 1181, 1181,  431, 1181,  431,  431,  431, 1181,
     1181, 1181, 1181,  431,  435,  435, 1181,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  440,  440, 1181,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  445,  445,
     1181,  445,  445,  445,  445,  445,  445,  445,  445,  445,

      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      447, 1181, 1181, 1181, 1181, 1181,  447, 1181,  447,  447,
      447,  447,  447, 1181, 1181,  447,  447,  447,  447,  447,
      447, 1181, 1181, 1181, 1181,  447,  453, 1181,  453,  453,
      453, 1181, 1181, 1181, 1181,  453,  458,  458,  458,  458,
     1181, 1181,  458, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181,  458,  458, 1181, 1181, 1181,  458, 1181,  458,
      458,  458, 1181, 1181, 1181, 1181,  458,  466,  466,  466,
      466, 1181, 1181,  466, 1181, 1181, 1181, 1181, 1181, 1181,

     1181,  466, 1181, 1181,  466, 1181, 1181, 1181,  466, 1181,
      466,  466,  466, 1181, 1181, 1181,  466,  466,  469,  469,
      469,  469, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181,  469, 1181,  469,  469, 1181, 1181, 1181,  469,
     1181,  469,  469,  469, 1181, 1181, 1181, 1181,  469,  475,
      475,  475,  475, 1181, 1181,  475, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
      475, 1181,  475,  475,  475, 1181, 1181, 1181, 1181,  475,
      476, 1181,  476,  476,  476, 1181, 1181, 1181, 1181,  476,
      478, 1181,  478, 1181, 1181, 1181, 1181,  478, 1181,  478,

      478,  478, 1181, 1181, 1181, 1181,  478,  482,  482, 1181,
      482, 1181, 1181, 1181, 1181,  482, 1181,  482,  482,  482,
     1181, 1181, 1181, 1181,  482,  487,  487, 1181,  487,  487,
      487,  487,  487,  487,  487,  487, 1181,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487, 1181,  487,
      487,  487,  487,  487,  487,  487,  487,  491, 1181, 1181,
      491, 1181, 1181, 1181, 1181,  491, 1181,  491,  491,  491,
     1181, 1181, 1181, 1181,  491,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493, 1181,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493,  495,  495, 1181,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495, 1181,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  497,
      497, 1181,  497, 1181,  497,  497,  497, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181,  497,  497,  497,
     1181,  497,  497, 1181, 1181, 1181, 1181, 1181,  497,  502,
     1181, 1181,  502, 1181, 1181, 1181, 1181,  502, 1181,  502,
      502,  502, 1181, 1181, 1181, 1181,  502,  506,  506, 1181,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  509,
      509, 1181,  509, 1181,  509,  509,  509,  509,  509,  509,
     1181,  509,  509,  509,  509, 1181,  509,  509,  509,  509,
     1181,  509, 1181,  509,  509,  509,  509,  509,  509,  509,
      509,  519, 1181, 1181,  519, 1181, 1181, 1181, 1181,  519,
     1181, 1181, 1181, 1181,  519,  519, 1181,  519, 1181, 1181,
     1181, 1181,  519, 1181,  519,  519,  519,  527,  527, 1181,
      527, 1181,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527, 1181,  527,

     1181,  527,  527,  527,  527,  527,  527,  527,  527,  531,
      531, 1181,  531, 1181,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
     1181,  531, 1181,  531,  531,  531,  531,  531,  531,  531,
      531,  540, 1181, 1181,  540, 1181, 1181, 1181, 1181,  540,
     1181,  540,  540,  540, 1181, 1181, 1181, 1181,  540,  544,
      544, 1181,  544,  544,  544,  544,  544,  544, 1181, 1181,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
     1181,  544, 1181,  544,  544,  544,  544,  544,  544,  544,
      544,  551, 1181,  551,  551,  551, 1181, 1181, 1181, 1181,

      551,  553, 1181,  553,  553, 1181, 1181, 1181,  553, 1181,
      553,  553,  553, 1181, 1181, 1181, 1181,  553,  556, 1181,
      556,  556,  556, 1181, 1181, 1181, 1181,  556,  558, 1181,
      558,  558, 1181, 1181, 1181,  558, 1181,  558,  558,  558,
     1181, 1181, 1181, 1181,  558,  561,  561, 1181,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561, 1181,  561, 1181,  561,
      561,  561,  561,  561,  561,  561,  561,  564, 1181, 1181,
      564, 1181, 1181, 1181, 1181,  564, 1181,  564,  564,  564,
     1181, 1181, 1181, 1181,  564,  566,  566, 1181,  566,  566,

      566,  566,  566,  566,  566,  566,  566,  566,  566, 1181,
      566,  566,  566,  566,  566,  566,  566,  566, 1181,  566,
      566,  566,  566,  566,  566,  566,  566,  569,  569, 1181,
      569,  569,  569,  569,  569,  569,  569,  569, 1181,  569,
      569,  569,  569,  569,  569,  569,  569,  569, 1181,  569,
     1181,  569,  569,  569,  569,  569,  569,  569,  569,  572,
     1181,  572,  572,  572,  572,  572, 1181, 1181, 1181,  572,
     1181,  572,  572,  572, 1181, 1181, 1181, 1181,  572,  575,
     1181,  575,  575,  575,  575,  575, 1181, 1181, 1181,  575,
     1181,  575,  575,  575, 1181, 1181, 1181, 1181,  575,  576,

     1181,  576,  576,  576,  576,  576, 1181, 1181, 1181,  576,
     1181,  576,  576,  576, 1181, 1181, 1181, 1181,  576,  578,
      578, 1181,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578, 1181,  578,  578,  578,  578,  578,  578,  578,
      578,  580,  580,  580,  580,  580,  580,  580,  580,  580,
     1181, 1181,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  330,  330,  330, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181,  330,  330,  330,  330,

      330,  330,  330,  330,  330, 1181,  330,  330,  302,  302,
     1181,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      305, 1181,  305,  305,  305, 1181, 1181, 1181, 1181,  305,
      583,  583, 1181, 1181, 1181,  583, 1181,  583,  583,  583,
     1181, 1181, 1181, 1181,  583,  306, 1181,  306,  306, 1181,
      306, 1181, 1181, 1181,  306,  306, 1181,  306,  306,  306,
      585, 1181, 1181,  585, 1181, 1181, 1181, 1181,  585, 1181,
      585,  585,  585,  592, 1181, 1181,  592, 1181,  592,  592,

      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  610, 1181,  610,  610,  610,
     1181, 1181, 1181,  610,  341, 1181,  341,  341, 1181,  341,
     1181, 1181, 1181,  341,  341, 1181,  341,  341,  341,  342,
     1181, 1181,  342, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
      342,  342,  342,  342,  342,  365,  365, 1181,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  367, 1181, 1181,
     1181, 1181, 1181,  367, 1181,  367,  367,  367,  367,  367,
     1181, 1181,  367,  367,  367,  367,  367,  367, 1181, 1181,
     1181, 1181,  367,  640, 1181, 1181, 1181, 1181, 1181,  640,
     1181,  640, 1181,  640,  640,  640, 1181, 1181,  640,  640,
      640,  640,  640,  640, 1181, 1181, 1181, 1181,  640,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  377, 1181,  377,  377, 1181, 1181, 1181,  377, 1181,

      377,  377,  377, 1181, 1181, 1181, 1181,  377,  375, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181,  375, 1181,  375,  375,  375, 1181, 1181,
     1181, 1181,  375,  386,  386,  386,  386, 1181, 1181,  386,
     1181, 1181, 1181, 1181, 1181, 1181, 1181,  386, 1181, 1181,
      386, 1181, 1181, 1181,  386, 1181,  386,  386,  386, 1181,
     1181, 1181,  386,  386,  389,  389,  389,  389, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  389, 1181,
      389,  389,  389, 1181, 1181,  389, 1181,  389,  389,  389,
     1181, 1181, 1181, 1181,  389,  396,  396,  396,  396, 1181,

     1181,  396, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181,  396, 1181,  396,  396,
      396, 1181, 1181, 1181, 1181,  396,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645, 1181,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  648, 1181,
      648, 1181, 1181,  648, 1181,  648,  648,  648, 1181, 1181,
     1181, 1181,  648,  397,  397, 1181,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  399, 1181, 1181, 1181, 1181,
     1181,  399, 1181,  399,  399,  399,  399,  399, 1181, 1181,
      399,  399,  399,  399,  399,  399, 1181, 1181, 1181, 1181,
      399,  649, 1181, 1181, 1181, 1181, 1181,  649, 1181,  649,
     1181,  649,  649,  649, 1181, 1181,  649,  649,  649,  649,
      649,  649, 1181, 1181, 1181, 1181,  649,  405,  405, 1181,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  405,
      405,  405,  405,  405,  405,  405,  405,  405,  405,  407,
      407, 1181,  407,  407,  407,  407,  407,  407,  407,  407,

      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  411,  411, 1181, 1181, 1181, 1181, 1181,  411, 1181,
      411,  411,  411,  411,  411, 1181,  411,  411,  411,  411,
      411,  411,  411, 1181, 1181, 1181, 1181,  411,  654, 1181,
     1181, 1181, 1181, 1181,  654, 1181,  654, 1181,  654,  654,
      654, 1181, 1181,  654,  654,  654,  654,  654,  654, 1181,
     1181, 1181, 1181,  654,  422,  422,  422,  422, 1181, 1181,
      422, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  422, 1181,
     1181,  422, 1181, 1181, 1181,  422, 1181,  422,  422,  422,

     1181, 1181, 1181,  422,  422,  427,  427,  427,  427, 1181,
     1181, 1181, 1181,  427, 1181, 1181, 1181, 1181, 1181,  427,
     1181,  427,  427, 1181, 1181, 1181,  427, 1181,  427,  427,
      427, 1181, 1181, 1181, 1181,  427,  430,  430,  430,  430,
     1181, 1181,  430, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181,  430, 1181,  430,
      430,  430, 1181, 1181, 1181, 1181,  430,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657, 1181,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  659,

     1181, 1181,  659, 1181, 1181, 1181, 1181,  659, 1181, 1181,
     1181, 1181, 1181, 1181, 1181,  659, 1181, 1181, 1181, 1181,
      659, 1181,  659,  659,  659, 1181, 1181, 1181, 1181,  659,
      431, 1181, 1181,  431, 1181, 1181, 1181, 1181,  431, 1181,
      431,  431,  431, 1181, 1181, 1181, 1181,  431,  435,  435,
     1181,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      440,  440, 1181,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,

      440,  440,  440,  440,  440,  440,  440,  440,  440,  440,
      440,  440,  445,  445, 1181,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  445,  445,
      445,  445,  445,  445,  447, 1181, 1181, 1181, 1181, 1181,
      447, 1181,  447,  447,  447,  447,  447, 1181, 1181,  447,
      447,  447,  447,  447,  447, 1181, 1181, 1181, 1181,  447,
      663, 1181, 1181, 1181, 1181, 1181,  663, 1181,  663, 1181,
      663,  663,  663, 1181, 1181,  663,  663,  663,  663,  663,
      663, 1181, 1181, 1181, 1181,  663,  458,  458,  458,  458,

     1181, 1181,  458, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181,  458,  458, 1181, 1181, 1181,  458, 1181,  458,
      458,  458, 1181, 1181, 1181, 1181,  458,  666, 1181,  666,
      666,  666, 1181, 1181, 1181, 1181,  666,  669,  669,  669,
      669, 1181, 1181,  669, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181,  669,  669, 1181, 1181, 1181,  669, 1181,
      669,  669,  669, 1181, 1181, 1181, 1181,  669,  466,  466,
      466,  466, 1181, 1181,  466, 1181, 1181, 1181, 1181, 1181,
     1181, 1181,  466, 1181, 1181,  466, 1181, 1181, 1181,  466,
     1181,  466,  466,  466, 1181, 1181, 1181,  466,  466,  469,

      469,  469,  469, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181,  469, 1181,  469,  469, 1181, 1181, 1181,
      469, 1181,  469,  469,  469, 1181, 1181, 1181, 1181,  469,
      475,  475,  475,  475, 1181, 1181,  475, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181,  475, 1181,  475,  475,  475, 1181, 1181, 1181, 1181,
      475,  672, 1181, 1181, 1181, 1181,  672, 1181,  672,  672,
      672, 1181, 1181, 1181, 1181,  672,  478, 1181,  478, 1181,
     1181, 1181, 1181,  478, 1181,  478,  478,  478, 1181, 1181,
     1181, 1181,  478,  674, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  674, 1181,
      674,  674,  674, 1181, 1181, 1181, 1181,  674,  482,  482,
     1181,  482, 1181, 1181, 1181, 1181,  482, 1181,  482,  482,
      482, 1181, 1181, 1181, 1181,  482,  487,  487, 1181,  487,
      487,  487,  487,  487,  487,  487,  487, 1181,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487, 1181,
      487,  487,  487,  487,  487,  487,  487,  487,  491, 1181,
     1181,  491, 1181, 1181, 1181, 1181,  491, 1181,  491,  491,
      491, 1181, 1181, 1181, 1181,  491,  493,  493,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  493,  493,

      493,  493,  493,  493,  493,  493,  493, 1181,  493,  493,
      493,  493,  493,  493,  493,  493,  493,  493,  495,  495,
     1181,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  495,  495,  495,  495, 1181,
      495,  495,  495,  495,  495,  495,  495,  495,  495,  495,
      681, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181,  681, 1181,  681,  681,  681,
     1181, 1181, 1181, 1181,  681,  502, 1181, 1181,  502, 1181,
     1181, 1181, 1181,  502, 1181,  502,  502,  502, 1181, 1181,
     1181, 1181,  502,  506,  506, 1181,  506,  506,  506,  506,

      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  509,  509, 1181,  509, 1181,
      509,  509,  509,  509,  509,  509, 1181,  509,  509,  509,
      509, 1181,  509,  509,  509,  509, 1181,  509, 1181,  509,
      509,  509,  509,  509,  509,  509,  509,  519, 1181, 1181,
      519, 1181, 1181, 1181, 1181,  519, 1181, 1181, 1181, 1181,
      519,  519, 1181,  519, 1181, 1181, 1181, 1181,  519, 1181,
      519,  519,  519,  527,  527, 1181,  527, 1181,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,

      527,  527,  527,  527, 1181,  527, 1181,  527,  527,  527,
      527,  527,  527,  527,  527,  531,  531, 1181,  531, 1181,
      531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  531,  531, 1181,  531, 1181,  531,
      531,  531,  531,  531,  531,  531,  531,  540, 1181, 1181,
      540, 1181, 1181, 1181, 1181,  540, 1181,  540,  540,  540,
     1181, 1181, 1181, 1181,  540,  544,  544, 1181,  544,  544,
      544,  544,  544,  544, 1181, 1181,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544, 1181,  544, 1181,  544,
      544,  544,  544,  544,  544,  544,  544,  553, 1181,  553,

      553, 1181, 1181, 1181,  553, 1181,  553,  553,  553, 1181,
     1181, 1181, 1181,  553,  551, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  551,
     1181,  551,  551,  551, 1181, 1181, 1181, 1181,  551,  558,
     1181,  558,  558, 1181, 1181, 1181,  558, 1181,  558,  558,
      558, 1181, 1181, 1181, 1181,  558,  556, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181,  556, 1181,  556,  556,  556, 1181, 1181, 1181, 1181,
      556,  561,  561, 1181,  561,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  561,

      561,  561, 1181,  561, 1181,  561,  561,  561,  561,  561,
      561,  561,  561,  564, 1181, 1181,  564, 1181, 1181, 1181,
     1181,  564, 1181,  564,  564,  564, 1181, 1181, 1181, 1181,
      564,  566,  566, 1181,  566,  566,  566,  566,  566,  566,
      566,  566,  566,  566,  566, 1181,  566,  566,  566,  566,
      566,  566,  566,  566, 1181,  566,  566,  566,  566,  566,
      566,  566,  566,  569,  569, 1181,  569,  569,  569,  569,
      569,  569,  569,  569, 1181,  569,  569,  569,  569,  569,
      569,  569,  569,  569, 1181,  569, 1181,  569,  569,  569,
      569,  569,  569,  569,  569,  572, 1181,  572,  572,  572,

      572,  572, 1181, 1181, 1181,  572, 1181,  572,  572,  572,
     1181, 1181, 1181, 1181,  572,  575, 1181,  575,  575,  575,
      575,  575, 1181, 1181, 1181,  575, 1181,  575,  575,  575,
     1181, 1181, 1181, 1181,  575,  574, 1181,  574,  574,  574,
      574,  574, 1181, 1181, 1181,  574, 1181,  574,  574,  574,
     1181, 1181, 1181, 1181,  574,  576, 1181,  576,  576,  576,
      576,  576, 1181, 1181, 1181,  576, 1181,  576,  576,  576,
     1181, 1181, 1181, 1181,  576,  578,  578, 1181,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578,  578,  578,
      578,  578,  578,  578,  578,  578,  578,  578, 1181,  578,

      578,  578,  578,  578,  578,  578,  578,  580,  580,  580,
      580,  580,  580,  580,  580,  580, 1181, 1181,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  583,
      583, 1181, 1181, 1181,  583, 1181,  583,  583,  583, 1181,
     1181, 1181, 1181,  583,  721,  721, 1181,  721,  721,  721,
      721, 1181,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  585,  585, 1181,  585,
     1181, 1181, 1181, 1181,  585, 1181,  585,  585,  585,  306,

     1181,  306,  306, 1181,  306, 1181, 1181, 1181,  306,  306,
     1181,  306,  306,  306,  592, 1181, 1181,  592, 1181,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  730,  730, 1181,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  610, 1181,
     1181,  610, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  610,

     1181,  610,  610,  610,  330, 1181, 1181,  330, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181,  330, 1181,  330,  330,  330,
      744,  744, 1181,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744, 1181,
      744,  744,  342, 1181, 1181,  342, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181,  342,  342,  342,  342,  342,  640, 1181,
     1181, 1181, 1181, 1181,  640, 1181,  640,  640,  640,  640,

      640, 1181, 1181,  640,  640,  640,  640,  640,  640, 1181,
     1181, 1181, 1181,  640,  367, 1181, 1181, 1181, 1181, 1181,
      367, 1181,  367,  367,  367,  367,  367, 1181, 1181,  367,
      367,  367,  367,  367,  367, 1181, 1181, 1181, 1181,  367,
      375, 1181,  375,  375,  375, 1181, 1181, 1181, 1181,  375,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  648, 1181,  648, 1181, 1181,  648, 1181,  648,
      648,  648, 1181, 1181, 1181, 1181,  648,  649, 1181, 1181,

     1181, 1181, 1181,  649, 1181,  649,  649,  649,  649,  649,
     1181, 1181,  649,  649,  649,  649,  649,  649, 1181, 1181,
     1181, 1181,  649,  399, 1181, 1181, 1181, 1181, 1181,  399,
     1181,  399,  399,  399,  399,  399, 1181, 1181,  399,  399,
      399,  399,  399,  399, 1181, 1181, 1181, 1181,  399,  766,
      766, 1181,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  654,  654, 1181, 1181, 1181, 1181, 1181,  654, 1181,
      654,  654,  654,  654,  654, 1181,  654,  654,  654,  654,

      654,  654,  654, 1181, 1181, 1181, 1181,  654,  411,  411,
     1181, 1181, 1181, 1181, 1181,  411, 1181,  411,  411,  411,
      411,  411, 1181,  411,  411,  411,  411,  411,  411,  411,
     1181, 1181, 1181, 1181,  411,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  657,  657,  657,
      657,  657,  657,  657,  657,  657,  657,  659, 1181, 1181,
      659, 1181, 1181, 1181, 1181,  659, 1181, 1181, 1181, 1181,
     1181, 1181, 1181,  659, 1181, 1181, 1181, 1181,  659, 1181,
      659,  659,  659, 1181, 1181, 1181, 1181,  659,  663, 1181,

     1181, 1181, 1181, 1181,  663, 1181,  663,  663,  663,  663,
      663, 1181, 1181,  663,  663,  663,  663,  663,  663, 1181,
     1181, 1181, 1181,  663,  447, 1181, 1181, 1181, 1181, 1181,
      447, 1181,  447,  447,  447,  447,  447, 1181, 1181,  447,
      447,  447,  447,  447,  447, 1181, 1181, 1181, 1181,  447,
      776,  776,  776,  776, 1181, 1181,  776, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181,  776,  776, 1181, 1181,
     1181,  776, 1181,  776,  776,  776, 1181, 1181, 1181, 1181,
      776,  666,  666,  666,  666, 1181, 1181,  666, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  666, 1181,

     1181, 1181,  666, 1181,  666,  666,  666, 1181, 1181, 1181,
     1181,  666,  669,  669,  669,  669, 1181, 1181,  669, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  669,  669,
     1181, 1181, 1181,  669, 1181,  669,  669,  669, 1181, 1181,
     1181, 1181,  669,  672, 1181, 1181, 1181, 1181,  672, 1181,
      672,  672,  672, 1181, 1181, 1181, 1181,  672,  674, 1181,
      674,  674,  674, 1181, 1181, 1181, 1181,  674,  780, 1181,
      780, 1181, 1181, 1181, 1181,  780, 1181,  780,  780,  780,
     1181, 1181, 1181, 1181,  780,  681, 1181,  681,  681,  681,
     1181, 1181, 1181, 1181,  681,  786, 1181, 1181, 1181, 1181,

      786, 1181,  786,  786,  786, 1181, 1181, 1181, 1181,  786,
      797,  797,  797,  797,  797,  797,  797,  797,  797,  797,
      797,  797,  797,  797,  797,  797,  797, 1181,  797,  797,
      797,  797, 1181,  797, 1181, 1181,  797,  797,  797,  797,
      797,  797,  551, 1181,  551,  551,  551, 1181, 1181, 1181,
     1181,  551,  556, 1181,  556,  556,  556, 1181, 1181, 1181,
     1181,  556,  721,  721, 1181,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  721,  721,  721,  721,  721,  721,
      721,  721,  721,  721,  821, 1181, 1181,  821, 1181, 1181,

     1181, 1181,  821, 1181,  821,  821,  821,  313, 1181,  313,
     1181,  313,  313, 1181,  313, 1181, 1181, 1181,  313,  313,
     1181,  313,  313,  313,  730,  730, 1181,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,  730,  730,  330, 1181, 1181,  330,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181,  330, 1181,  330,
      330,  330,  744,  744, 1181,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  748,  748,  748,  748,  748,  342,
     1181, 1181,  342, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
      342,  342,  342,  342,  342,  306,  306, 1181,  306, 1181,
     1181, 1181, 1181, 1181, 1181, 1181,  306, 1181,  306,  306,
     1181,  306,  306, 1181, 1181,  306,  306, 1181,  306,  306,
      306, 1181,  306,  367, 1181, 1181, 1181, 1181, 1181,  367,
     1181,  367,  367,  367,  367,  367, 1181, 1181,  367,  367,
      367,  367,  367,  367, 1181, 1181, 1181, 1181,  367,  645,

      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  645,  645,  645,  645,  645,
      645,  399, 1181, 1181, 1181, 1181, 1181,  399, 1181,  399,
      399,  399,  399,  399, 1181, 1181,  399,  399,  399,  399,
      399,  399, 1181, 1181, 1181, 1181,  399,  766,  766, 1181,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  411,
      411, 1181, 1181, 1181, 1181, 1181,  411, 1181,  411,  411,

      411,  411,  411, 1181,  411,  411,  411,  411,  411,  411,
      411, 1181, 1181, 1181, 1181,  411,  447, 1181, 1181, 1181,
     1181, 1181,  447, 1181,  447,  447,  447,  447,  447, 1181,
     1181,  447,  447,  447,  447,  447,  447, 1181, 1181, 1181,
     1181,  447,  854, 1181,  854,  854,  854, 1181, 1181, 1181,
     1181,  854,  776,  776,  776,  776, 1181, 1181,  776, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  776,  776,
     1181, 1181, 1181,  776, 1181,  776,  776,  776, 1181, 1181,
     1181, 1181,  776,  666,  666,  666,  666, 1181, 1181,  666,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

      666, 1181, 1181, 1181,  666, 1181,  666,  666,  666, 1181,
     1181, 1181, 1181,  666,  780, 1181,  780, 1181, 1181, 1181,
     1181,  780, 1181,  780,  780,  780, 1181, 1181, 1181, 1181,
      780,  786, 1181, 1181, 1181, 1181,  786, 1181,  786,  786,
      786, 1181, 1181, 1181, 1181,  786,  900,  900, 1181,  900,
     1181, 1181, 1181, 1181,  900, 1181,  900,  900,  900,  906,
      906, 1181,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  833,  833,  833,  833,  833,  833,  833,  833,  833,

      833,  833,  833,  833,  833,  833,  833,  833,  833,  833,
      833,  833,  833, 1181,  833, 1181, 1181, 1181,  833,  833,
      833,  833,  833,  928,  928,  928,  928, 1181, 1181,  928,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,  928,
      928, 1181, 1181, 1181,  928, 1181,  928,  928,  928, 1181,
     1181, 1181, 1181,  928,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954, 1181,  954,  954,  954,  954, 1181,  954, 1181,  954,
     1181,  954,  954,  954,  954,  954,  981,  981, 1181,  981,
      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,

      981,  981,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  981,  981,  981,  981,  981,  981, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1181, 1026, 1026, 1026, 1026,
     1181, 1026, 1181, 1181, 1181, 1026, 1026, 1026, 1026, 1026,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1181, 1027, 1027,
     1027, 1027, 1181, 1027, 1181, 1181, 1181, 1027, 1027, 1027,
     1027, 1027, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1181,

     1078, 1078, 1078, 1078, 1181, 1078, 1181, 1181, 1181, 1078,
     1078, 1078, 1078, 1078, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1181, 1089, 1089, 1089, 1089, 1181, 1089, 1181, 1181,
     1181, 1089, 1089, 1089, 1089, 1089,   85, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181
    } ;

static yyconst flex_int16_t yy_chk[10022] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    4,   21,   22,    4,   23,   21,
       22,   24,   23,  317,   47,   24,    4,    4,   35,    4,
        4,   36,   39,    4,    4,    4,   48,   40,   53,   35,

       53,   57,   36,   39,  100,  317,  117,  100,   40,   43,
       43,  117,   43,   58,   43,   39,   21,   22,  596,   23,
       40,   53,   24,   44,   44,   47,   44,  308,   44,   35,
      308,   63,   36,   39,   64,   81,   82,   48,   40,   53,
      596,  604,   57,    4,    5,    5,    5,    5,    5,    5,
        5,   43,    5,    5,   58,    5,    5,    5,   45,    5,
       45,    5,    5,  604,   75,   44,    5,    5,    5,   45,
       51,   51,   63,   51,   45,   64,   81,   82,   75, 1176,
       83,   45,   52,   52,   84,   52,    5,    5,    5,   83,
       83,  216,  309,   84,   84,   76,  216,  206,  259,   45,

      206,  309,  206,  259,   54,   75,   54,   89,   89,   76,
       89,  282,   51,    5,    5,    5,    5,    6,    6,    6,
        6,    6,    6,    6,   52,    6,    6,   54,    6,    6,
        6,   46,    6,   46,    6,    6,   76, 1174,  282,    6,
        6,    6,   46,   61,   55,   54,   55,   46,  528,   89,
      528,  264,   61,   61,   46,   93,  264,  109,  109,    6,
        6,    6,  109,  406,   93,  535,   61,   55,  127,  127,
      127,  127,   46,   93,  104,  127,  104,  104,  104,  535,
     1172,  406,  104,  109,   61,   55,    6,    6,    6,    6,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,   13,   69,   13,   13,   62,   13,
       13,   13,   56,   13,   56,   13,   13,   62,   62,  233,
       13,   13,   13,  233,   70,   71,  567,   97,   69,   97,
       97,   62,   97,   97,   97,   56,  105,   72,   97,  105,
       13,   13,   13,  318,  886,  567,   69,   70,   71,   62,
      197,  105,  221,   56,  234,  221, 1169,  105,  886,  234,

       72,  197,  221,  234,  318,   70,   71,   13,   13,   13,
       13,   14,   14,   14,   14,   14,   14,   14,   72,   14,
       14,   77,   14,   14,   14,   78,   14,   88,   14,   14,
       88,  197,   77,   14,   14,   14,   78,   94,  336,   94,
       94,   94,   94,  101,   77,  105,  101,  336,   78,  314,
       94,   88,  314,   14,   14,   14,  118,  118,  320,  118,
      126,  126,   77,  126, 1166, 1165,   78,  101,   94,   88,
      321,  375,  110,  110,  323,  351,  375,  110,  351,  320,
       14,   14,   14,   14,   15,   15,   15,   15,   15,   15,
       15,  321,   15,   15,  323,   15,   15,   15,  110,   15,

      118,   15,   15, 1161,  126,  599,   15,   15,   15,  102,
      227,  227,  102,  227,  324,  102,  120,  120,  120,  120,
      121,  121,  121,  121,  102,  599,   15,   15,   15, 1158,
      102,  356,  120,  102,  356,  324,  121,  120,  131,  131,
      563,  121,  335,  131,  586,  132,  132,  586,  153,  153,
      132,  153,  227,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   16,  131,   16,   16,  563,   16,   16,
       16,  132,   16,  329,   16,   16,  335, 1135,  102,   16,
       16,   16,  103,  103,  601,  103,  125,  125,  125,  125,
     1135,  316,  153,  103,  329,  103,  103,  103,  103,   16,

       16,   16,  125,  335,  601,  652,  103,  125,  125,  149,
      149,  149,  149,  316,  316,  316,  149,  377,  181,  181,
      181,  181,  377,  652,  103,  181,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   25,   25,
       25,   25,   25,   25,   25,  342,   25,   25,  342,   25,
       25,   25,  940,   25,  224,   25,   25,  224,  551,  605,

       25,   25,   25,  551,  224,  353,  353,  940,  353,  122,
      122,  122,  122,  553,  157,  157,  122,  157,  553,  605,
       25,   25,   25,  111,  111,  122,  111,  342,  161,  161,
      122,  161,  354,  238,  354,  354,  354,  238, 1157,  111,
      111,  556,  319,  238,  111,  238,  556,   25,   25,   25,
       25,   26,   26,   26,   26,   26,   26,   26,  157,   26,
       26,  319,   26,   26,   26,  111,   26,  111,   26,   26,
      138, 1156,  161,   26,   26,   26,  143,  143,  143,  143,
      122,  138,  138,  319,  165,  165,  138,  610,  138,  165,
      610,  558,  143,   26,   26,   26,  558,  143,  144,  144,

      144,  144,  359,  359, 1155,  359,  341,  138,  341,  341,
      165,  341,  341,  341,  144,  370,  370,  341,  370,  144,
       26,   26,   26,   26,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   41,   41,   41,   41,   41,   41,

       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,  172,  172,   49,  172,  882,  606,
       49,   49,   49,   49, 1171,  882,  726,  123,  123,  123,

      123, 1171, 1154,  729,  123,  148,  148,  148,  148,  606,
       49,   49,   49,  123,  430,  148,  726,  430,  123,  180,
      180,  148,  180,  729,  430, 1175,  148,  344,  172, 1175,
      344,  504,  186,  186,  504,  186,  504,   49,   49,   49,
       49,   49,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,  134,  134,
       50,  134, 1153,  180,   50,   50,   50,   50,  123,  344,
     1149,  139,  166,  166,  134,  134,  186,  166,  600,  134,
     1163,  600,  139,  139,   50,   50,   50,  139,  239,  139,
      344,  379,  379,  239,  379, 1163,  613,  239,  166,  613,

      134,  600,  134,  239, 1148,  239,  391,  391,  139,  391,
     1146,   50,   50,   50,   50,   50,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   95, 1145,  869,  140,
      145,  145,  145,  145, 1144,  189,  189,  145,  189,   95,

      140,  140, 1143,  732,  869,  140,  145,  140,  368,   95,
       95,  145,  368,  361,   95,   95,  361,  616,   95,   95,
      616,   95,   95,  732,  299,  299,  140,  299,  346,   95,
       95,  346, 1142,  368,   95,   95, 1141,  361,  734,  189,
       95,   95,   95,   95,   95,   95,   96,   96,   96,   96,
      615,  142,  142,  615,  142,   96,  142,  192,  192,  734,
      192,  145,   96,   96,   96,  616,  299,  142,  142,  400,
      346,  412,  142,  400,  142,  412,  146,  146,  146,  146,
     1151,  296,   96,  146,  296,  346,   96, 1140,   96,   96,
       96, 1151,  146,  142,  400,  142,  412,  146,  830, 1139,

      622,  192,   96,  622,  343,  296,   96,  343,   96,  615,
       96,   96,   98,   98,   98,   98,  167,  167,  830,  167,
     1115,   98, 1115,  296,  171,  171,  171,  171,   98,   98,
       98,  171,  167,  167, 1138,  367,  367,  167,  201,  201,
      367,  201,  171,  171,  171,  171,  343,  146,   98,  622,
       98,  493,   98, 1130,   98,   98,   98, 1178,  167,  343,
      167,  367,  493,  174,  174,  174,  174, 1129,   98, 1127,
      300,  300,   98,  300,   98, 1178,   98,   98,   99,  174,
      201,   99,  201, 1126,  174,  175,  175,  175,  175, 1125,
       99,   99,  493,   99,   99,  369,  369,   99,   99,   99,

      369,  175,   99, 1124, 1123, 1122,  175,  176,  176,  176,
      176, 1121,  300, 1120,  176,  177,  177,  177,  177, 1119,
       99,  369,  177,  176,  179,  179,  179,  179,  176,  219,
      219,  177,  219,  719,  345,  348,  177,  345,  348, 1118,
      179,  225,  225,  352,  225,  179,  352,   99,  137,  137,
     1109,  137,  137,  137,  137, 1108,  137,  137,  352,  137,
      137,  137, 1095,  137,  352,  137,  137,  719, 1094, 1092,
      137,  137,  137,  219, 1091, 1085,  345,  348,  176,  200,
      200,  200,  200,  345,  348,  225,  177, 1084, 1083, 1082,
      137,  137,  137,  348,  719,  200,  200,  200,  242,  242,

     1081,  242,  246,  246, 1080,  246,  252,  252, 1079,  252,
      255,  255,  352,  255, 1077,  200, 1051,  137,  137,  137,
      137,  286, 1050,  286,  286,  286,  286,  286,  286,  286,
      287, 1049,  287,  287,  287,  287,  287,  287,  287, 1048,
      322, 1047,  242,  322,  200,  347,  246, 1046,  347, 1045,
      252, 1044,  347, 1043,  255,  297,  297,  297,  297,  355,
     1042,  357,  355,  322,  357,  322,  349,  402,  402,  349,
      402,  297,  297,  297,  355, 1041,  357, 1040,  322, 1039,
      355,  621,  357, 1038,  621,  322,  347,  347,  372,  372,
     1037,  297, 1036,  372,  358,  358, 1035,  358,  297,  297,

      322, 1034,  362, 1033,  362,  362,  362, 1032,  349,  358,
      362, 1031, 1029,  347,  372,  358, 1028,  297,  358,  297,
      297,  298,  298,  298,  298, 1024,  349,  372,  355,  621,
      357,  382,  382,  382,  382, 1023, 1022,  298,  298,  298,
      390,  390,  390,  390, 1021,  363,  364,  382,  363,  364,
      399,  399,  382,  401,  401,  399, 1020,  298,  401,  602,
      363,  364,  602,  358,  298,  298,  363,  364,  383,  383,
      383,  383, 1019, 1018, 1016,  383,  399,  415,  415,  401,
      415, 1015,  602,  298,  383,  298,  298,  312,  633,  383,
      312,  633,  312,  312,  312,  312,  312,  312,  312,  312,

      312,  312,  312,  312,  312,  312, 1014, 1013, 1011,  312,
      312,  312,  312, 1010,  363,  364,  385,  385,  385,  385,
     1009, 1008, 1007,  385,  386,  386,  386,  386, 1006,  312,
      312,  312,  385,  389,  389,  389,  389,  385, 1005,  383,
      386,  387,  387,  387,  387,  386,  386, 1004,  387,  389,
      418,  418,  418,  418,  389,  389,  312,  312,  312,  312,
      312,  330,  432,  432,  330,  432,  418,  330,  330,  330,
      330,  418,  388,  388,  388,  388,  404,  404, 1003,  388,
     1002,  404,  448,  330,  330,  330,  448,  385,  388,  394,
      394,  394,  394,  388, 1001,  999,  394,  395,  395,  395,

      395,  411,  404,  330,  395,  437,  437,  448,  437,  998,
      413,  639,  411,  411,  639,  404,  997,  411,  994,  411,
      993,  413,  413,  417,  442,  442,  413,  442,  413,  330,
      984,  330,  330,  350,  417,  417,  350,  713,  411,  417,
      713,  417,  983,  388,  981,  350,  350,  413,  350,  350,
      980,  979,  350,  350,  350,  450,  450,  350,  450,  978,
      417,  419,  419,  419,  419,  977,  976,  975,  419,  421,
      421,  421,  421,  417,  974,  350,  421,  419,  422,  422,
      422,  422,  419,  459,  459,  421,  459,  973,  422,  972,
      421,  447,  447,  971,  422,  970,  447,  470,  470,  422,

      470,  969,  350,  407,  407,  968,  407,  407,  407,  407,
      614,  407,  407,  614,  407,  407,  407,  447,  407,  724,
      407,  407,  724,  967,  966,  407,  407,  407,  423,  423,
      423,  423,  419,  965,  964,  423,  424,  424,  424,  424,
      421,  479,  479,  424,  479,  407,  407,  407,  425,  425,
      425,  425,  424,  428,  428,  428,  428,  424,  425,  963,
      428,  614,  484,  484,  425,  484,  449,  449,  962,  425,
      960,  449,  407,  407,  407,  407,  408,  408,  958,  408,
      408,  408,  408,  738,  408,  408,  738,  408,  408,  408,
      955,  408,  449,  408,  408,  953,  952,  951,  408,  408,

      408,  427,  427,  427,  427,  452,  452,  424,  950,  949,
      452,  427,  488,  488,  948,  488,  947,  427,  408,  408,
      408,  946,  427,  429,  429,  429,  429,  945,  944,  943,
      429,  452,  453,  453,  453,  453,  942,  941,  939,  453,
      454,  454,  454,  454,  452,  408,  408,  408,  408,  938,
      453,  453,  453,  453,  937,  456,  456,  456,  456,  936,
      935,  454,  456,  458,  458,  458,  458,  934,  499,  499,
      458,  499,  933,  456,  456,  456,  456,  462,  462,  462,
      462,  458,  458,  458,  458,  463,  463,  463,  463,  931,
      930,  929,  463,  462,  466,  466,  466,  466,  462,  925,

      924,  463,  465,  465,  465,  465,  463,  923,  920,  465,
      466,  514,  514,  625,  514,  466,  625,  919,  465,  467,
      467,  467,  467,  465,  909,  908,  467,  468,  468,  468,
      468,  906,  517,  903,  468,  517,  469,  469,  469,  469,
      902,  900,  517,  468,  473,  473,  473,  473,  468,  899,
      695,  473,  469,  695,  898,  625,  463,  469,  474,  474,
      474,  474,  897,  896,  519,  474,  625,  519,  520,  520,
      895,  520,  894,  465,  519,  523,  523,  893,  523,  537,
      537,  892,  537,  541,  541,  891,  541,  545,  545,  890,
      545,  548,  548,  742,  548,  889,  742,  573,  468,  573,

      573,  573,  573,  573,  573,  573,  575,  695,  575,  575,
      575,  575,  575,  575,  575,  888,  576,  523,  576,  576,
      576,  576,  576,  576,  576,  591,  620,  887,  591,  620,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  885,  884,  883,  591,  591,  591,
      591,  611,  747,  742,  611,  747,  881,  626,  611,  627,
      626,  628,  627,  629,  628,  880,  629,  591,  591,  591,
      879,  814,  630,  631,  814,  630,  631,  634,  878,  634,
      634,  634,  877,  876,  875,  632,  632,  620,  632,  874,
      746,  873,  611,  746,  591,  591,  591,  591,  591,  626,

      632,  627,  747,  628,  749,  629,  632,  749,  626,  628,
      635,  635,  871,  635,  630,  631,  640,  640,  627,  611,
      630,  640,  631,  870,  629,  635,  637,  637,  868,  637,
      658,  635,  867,  658,  638,  638,  866,  638,  641,  641,
      658,  637,  640,  641,  865,  864,  749,  637,  746,  638,
      637,  642,  642,  863,  632,  638,  642,  645,  645,  645,
      645,  749,  659,  862,  641,  659,  646,  646,  646,  646,
      649,  649,  659,  650,  650,  649,  861,  642,  650,  635,
      645,  651,  651,  860,  745,  859,  651,  745,  642,  646,
      667,  667,  667,  667,  858,  637,  649,  667,  654,  650,

      663,  663,  857,  638,  856,  663,  855,  651,  852,  654,
      654,  667,  664,  664,  654,  851,  654,  664,  651,  653,
      653,  850,  653,  653,  653,  653,  663,  653,  653,  847,
      653,  653,  653,  655,  653,  654,  653,  653,  664,  846,
      837,  653,  653,  653,  655,  655,  745,  832,  656,  655,
      731,  655,  723,  731,  723,  733,  723,  723,  733,  656,
      656,  653,  653,  653,  656,  723,  656,  665,  665,  831,
      655,  826,  665,  731,  743,  825,  824,  743,  733,  666,
      666,  666,  666,  821,  834,  656,  666,  834,  653,  653,
      653,  653,  872,  665,  819,  872,  656,  666,  666,  666,

      666,  818,  817,  816,  665,  668,  668,  668,  668,  815,
      813,  812,  668,  669,  669,  669,  669,  822,  811,  822,
      669,  822,  822,  668,  668,  668,  668,  743,  810,  809,
      822,  669,  669,  669,  669,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,  741,  741,  741,  741,  741,  741,  741,  741,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,  750,  750,  751,  827,  828,  751,  827,
      828,  752,  753,  754,  752,  753,  754,  755,  808,  807,
      755,  750,  750,  750,  756,  756,  806,  756,  835,  827,
      828,  835,  805,  804,  911,  759,  759,  911,  803,  756,
      759,  757,  757,  836,  757,  756,  836,  751,  750,  750,
      750,  750,  750,  752,  753,  754,  757,  758,  758,  755,
      758,  759,  757,  802,  752,  751,  838,  755,  800,  838,

      961,  754,  758,  961,  753,  799,  759,  835,  758,  798,
      796,  758,  761,  761,  761,  761,  763,  763,  763,  763,
      765,  765,  795,  756,  904,  765,  911,  904,  773,  773,
      836,  794,  793,  773,  839,  761,  792,  839,  791,  763,
      757,  768,  789,  788,  787,  841,  765,  904,  841,  838,
      785,  784,  768,  768,  773,  842,  758,  768,  842,  768,
      783,  765,  766,  766,  782,  766,  766,  766,  766,  773,
      766,  766,  781,  766,  766,  766,  839,  766,  768,  766,
      766,  780,  779,  839,  766,  766,  766,  841,  778,  775,
      775,  775,  775,  768,  841,  772,  775,  842,  907,  844,

      844,  907,  844,  771,  766,  766,  766,  775,  775,  775,
      775,  770,  842,  764,  844,  760,  777,  777,  777,  777,
      844,  907,  748,  777,  910,  913,  982,  910,  913,  982,
      744,  766,  766,  766,  766,  767,  767,  777,  767,  767,
      767,  767,  986,  767,  767,  986,  767,  767,  767,  982,
      767,  985,  767,  767,  985,  736,  735,  767,  767,  767,
      730,  728,  776,  776,  776,  776,  727, 1093,  844,  776,
     1093,  910, 1147, 1160,  721, 1147, 1160,  767,  767,  767,
      776,  776,  776,  776,  790,  790,  720,  913,  718,  790,
      717,  986,  790,  790,  716,  843,  985,  790,  843, 1052,

      790,  790, 1052,  790,  767,  767,  767,  767,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  845,  845,  714,  843,  712,  845,
      848,  848,  853,  853,  711,  848,  849,  853,  843,  707,
      840,  840,  840,  914,  705,  703,  914,  849,  849,  702,
      845, 1052,  849,  701,  849,  700,  848,  845,  853,  915,
      699,  916,  915,  848,  916,  853,  698,  840,  840,  840,
      840,  840,  697,  849,  854,  854,  854,  854,  696,  917,
      849,  854,  917,  918,  918,  914,  921,  921,  918,  914,

      694,  921,  854,  854,  854,  854,  693,  987,  692,  922,
      987,  915,  988,  916, 1054,  988,  915, 1054,  691,  918,
      922,  922,  921,  918,  690,  922,  921,  922,  689,  926,
      926,  917,  989,  916,  926,  989, 1053,  990,  991, 1053,
      990,  991,  927,  927,  927,  927,  922,  992,  992,  927,
      922,  917,  992,  688,  988,  926,  987,  687,  686,  926,
      927,  927,  927,  927,  928,  928,  928,  928,  685,  684,
     1054,  928,  988,  992,  989, 1055, 1055,  989, 1055,  990,
      991,  683,  928,  928,  928,  928,  990,  991,  995,  995,
      996,  992,  682,  995, 1000, 1000, 1053, 1056,  679, 1000,

     1056,  996,  996,  678, 1057,  677,  996, 1057,  996, 1058,
     1059, 1059, 1058, 1063,  995, 1059,  676, 1055, 1062, 1062,
     1000, 1067, 1067, 1062, 1063, 1063, 1067,  996,  675, 1063,
     1112, 1063,  995, 1112, 1113,  674, 1059, 1113, 1000, 1056,
     1114, 1114,  671, 1114, 1062,  996, 1057, 1067,  670,  662,
     1063, 1058, 1116, 1117, 1133, 1116, 1117, 1133, 1134, 1056,
      661, 1134,  660, 1136, 1057, 1058, 1136, 1137, 1150,  657,
     1137, 1150, 1152, 1162, 1164, 1152, 1162, 1164, 1167, 1112,
     1170, 1167, 1114, 1170, 1173, 1177,  648, 1173, 1177, 1180,
     1180, 1113, 1180,  647, 1116, 1117, 1276,  644, 1276, 1276,

     1276, 1116, 1133, 1134, 1339, 1136,  609, 1339, 1339, 1137,
     1117, 1136, 1137,  608, 1152, 1353, 1164, 1353, 1353, 1353,
      607,  598, 1356, 1150, 1356, 1356, 1356, 1152,  597,  595,
      593, 1180, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184,

     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
     1186, 1186, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,

     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1187, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188, 1188,
     1188, 1188, 1188, 1188, 1188, 1188, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189,
     1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,

     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
     1192, 1192, 1192, 1192, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,

     1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,

     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1198, 1198, 1198, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,
     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199,

     1199, 1199, 1199, 1199, 1199, 1199, 1199, 1199, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201, 1201,
     1201, 1201, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,

     1202, 1202, 1202, 1202, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,
     1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205, 1205,

     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
     1206, 1206, 1207, 1207,  592, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207, 1207,
     1207, 1207, 1207, 1207, 1208, 1357,  590, 1357, 1357, 1357,
     1384,  587,  585, 1384, 1384,  583,  582,  581,  579, 1208,
      577, 1208, 1208, 1208,  574,  572,  571,  568, 1208, 1209,
      565, 1209, 1209, 1389, 1209, 1389, 1389, 1389, 1209, 1209,

      562, 1209, 1209, 1209, 1210,  560, 1210, 1210, 1210, 1210,
      559, 1210,  557,  555,  554, 1210, 1210, 1210, 1210, 1210,
     1210, 1211, 1211, 1211,  552,  550,  547,  543,  539, 1211,
      536,  534,  533,  532, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211,  530, 1211, 1211, 1212,  529, 1212, 1212,
      526, 1212,  525,  522,  516, 1212, 1212,  513, 1212, 1212,
     1212, 1213, 1213, 1213,  512,  508,  506,  505,  503, 1213,
      501,  498,  496,  495, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213,  492, 1213, 1213, 1214, 1214,  490, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,

     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1215,  486,
      483,  482,  481,  478, 1215,  477, 1215, 1215, 1215, 1215,
     1215,  476,  472, 1215, 1215, 1215, 1215, 1215, 1215,  464,
      461,  457,  445, 1215, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1217,  444, 1217, 1217,
     1217,  440,  439,  435,  434, 1217, 1218,  420, 1218, 1218,
      414,  409,  405, 1218,  397, 1218, 1218, 1218,  396,  393,

      384,  381, 1218, 1219, 1219, 1219, 1219,  378,  376, 1219,
      373,  365,  337,  334,  333,  332,  331, 1219,  328,  326,
     1219,  325,  315,  313, 1219,  306, 1219, 1219, 1219,  305,
      302,  301, 1219, 1219, 1220, 1220, 1220, 1220,  291,  288,
      285,  281,  277,  276,  273,  269,  268,  265, 1220,  260,
     1220, 1220, 1220,  229,  215, 1220,  214, 1220, 1220, 1220,
      213,  209,  208,  204, 1220, 1221, 1221, 1221, 1221,  199,
      196, 1221,  188,  185,  178,  164,  160,  156,  147,  133,
      130,  124,  112,  108,   92,   91, 1221,   90, 1221, 1221,
     1221,   85,    8,    7,    0, 1221, 1222, 1222,    0, 1222,

     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223,    0,
        0,    0,    0,    0, 1223,    0, 1223, 1223, 1223, 1223,
     1223,    0,    0, 1223, 1223, 1223, 1223, 1223, 1223,    0,
        0,    0,    0, 1223, 1224, 1224,    0, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
     1224, 1224, 1224, 1224, 1224, 1224, 1225, 1225,    0,    0,
        0,    0,    0, 1225,    0, 1225, 1225, 1225, 1225, 1225,

        0, 1225, 1225, 1225, 1225, 1225, 1225, 1225,    0,    0,
        0,    0, 1225, 1226, 1226, 1226, 1226,    0,    0, 1226,
        0,    0,    0,    0,    0,    0,    0, 1226,    0,    0,
     1226,    0,    0,    0, 1226,    0, 1226, 1226, 1226,    0,
        0,    0, 1226, 1226, 1227, 1227, 1227, 1227,    0,    0,
        0,    0, 1227,    0,    0,    0,    0,    0, 1227,    0,
     1227, 1227,    0,    0,    0, 1227,    0, 1227, 1227, 1227,
        0,    0,    0,    0, 1227, 1228, 1228, 1228, 1228,    0,
        0, 1228,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1228,    0, 1228, 1228,

     1228,    0,    0,    0,    0, 1228, 1229,    0,    0, 1229,
        0,    0,    0,    0, 1229,    0, 1229, 1229, 1229,    0,
        0,    0,    0, 1229, 1230, 1230,    0, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230,
     1230, 1230, 1230, 1230, 1230, 1230, 1231, 1231,    0, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231,
     1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1232, 1232,
        0, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,

     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
     1233,    0,    0,    0,    0,    0, 1233,    0, 1233, 1233,
     1233, 1233, 1233,    0,    0, 1233, 1233, 1233, 1233, 1233,
     1233,    0,    0,    0,    0, 1233, 1234,    0, 1234, 1234,
     1234,    0,    0,    0,    0, 1234, 1235, 1235, 1235, 1235,
        0,    0, 1235,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1235, 1235,    0,    0,    0, 1235,    0, 1235,
     1235, 1235,    0,    0,    0,    0, 1235, 1236, 1236, 1236,
     1236,    0,    0, 1236,    0,    0,    0,    0,    0,    0,

        0, 1236,    0,    0, 1236,    0,    0,    0, 1236,    0,
     1236, 1236, 1236,    0,    0,    0, 1236, 1236, 1237, 1237,
     1237, 1237,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1237,    0, 1237, 1237,    0,    0,    0, 1237,
        0, 1237, 1237, 1237,    0,    0,    0,    0, 1237, 1238,
     1238, 1238, 1238,    0,    0, 1238,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1238,    0, 1238, 1238, 1238,    0,    0,    0,    0, 1238,
     1239,    0, 1239, 1239, 1239,    0,    0,    0,    0, 1239,
     1240,    0, 1240,    0,    0,    0,    0, 1240,    0, 1240,

     1240, 1240,    0,    0,    0,    0, 1240, 1241, 1241,    0,
     1241,    0,    0,    0,    0, 1241,    0, 1241, 1241, 1241,
        0,    0,    0,    0, 1241, 1242, 1242,    0, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242,    0, 1242, 1242, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,    0, 1242,
     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1243,    0,    0,
     1243,    0,    0,    0,    0, 1243,    0, 1243, 1243, 1243,
        0,    0,    0,    0, 1243, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244,    0, 1244, 1244, 1244,

     1244, 1244, 1244, 1244, 1244, 1244, 1244, 1245, 1245,    0,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245,    0, 1245,
     1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1245, 1246,
     1246,    0, 1246,    0, 1246, 1246, 1246,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1246, 1246, 1246,
        0, 1246, 1246,    0,    0,    0,    0,    0, 1246, 1247,
        0,    0, 1247,    0,    0,    0,    0, 1247,    0, 1247,
     1247, 1247,    0,    0,    0,    0, 1247, 1248, 1248,    0,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,

     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248,
     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1249,
     1249,    0, 1249,    0, 1249, 1249, 1249, 1249, 1249, 1249,
        0, 1249, 1249, 1249, 1249,    0, 1249, 1249, 1249, 1249,
        0, 1249,    0, 1249, 1249, 1249, 1249, 1249, 1249, 1249,
     1249, 1250,    0,    0, 1250,    0,    0,    0,    0, 1250,
        0,    0,    0,    0, 1250, 1250,    0, 1250,    0,    0,
        0,    0, 1250,    0, 1250, 1250, 1250, 1251, 1251,    0,
     1251,    0, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,    0, 1251,

        0, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1252,
     1252,    0, 1252,    0, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
        0, 1252,    0, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
     1252, 1253,    0,    0, 1253,    0,    0,    0,    0, 1253,
        0, 1253, 1253, 1253,    0,    0,    0,    0, 1253, 1254,
     1254,    0, 1254, 1254, 1254, 1254, 1254, 1254,    0,    0,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
        0, 1254,    0, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1255,    0, 1255, 1255, 1255,    0,    0,    0,    0,

     1255, 1256,    0, 1256, 1256,    0,    0,    0, 1256,    0,
     1256, 1256, 1256,    0,    0,    0,    0, 1256, 1257,    0,
     1257, 1257, 1257,    0,    0,    0,    0, 1257, 1258,    0,
     1258, 1258,    0,    0,    0, 1258,    0, 1258, 1258, 1258,
        0,    0,    0,    0, 1258, 1259, 1259,    0, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259, 1259,
     1259, 1259, 1259, 1259, 1259, 1259,    0, 1259,    0, 1259,
     1259, 1259, 1259, 1259, 1259, 1259, 1259, 1260,    0,    0,
     1260,    0,    0,    0,    0, 1260,    0, 1260, 1260, 1260,
        0,    0,    0,    0, 1260, 1261, 1261,    0, 1261, 1261,

     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,    0,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,    0, 1261,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1262, 1262,    0,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,    0, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,    0, 1262,
        0, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1263,
        0, 1263, 1263, 1263, 1263, 1263,    0,    0,    0, 1263,
        0, 1263, 1263, 1263,    0,    0,    0,    0, 1263, 1264,
        0, 1264, 1264, 1264, 1264, 1264,    0,    0,    0, 1264,
        0, 1264, 1264, 1264,    0,    0,    0,    0, 1264, 1265,

        0, 1265, 1265, 1265, 1265, 1265,    0,    0,    0, 1265,
        0, 1265, 1265, 1265,    0,    0,    0,    0, 1265, 1266,
     1266,    0, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266,    0, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
        0,    0, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1268, 1268, 1268,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1268, 1268, 1268, 1268,

     1268, 1268, 1268, 1268, 1268,    0, 1268, 1268, 1269, 1269,
        0, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1270,    0, 1270, 1270, 1270,    0,    0,    0,    0, 1270,
     1271, 1271,    0,    0,    0, 1271,    0, 1271, 1271, 1271,
        0,    0,    0,    0, 1271, 1272,    0, 1272, 1272,    0,
     1272,    0,    0,    0, 1272, 1272,    0, 1272, 1272, 1272,
     1273,    0,    0, 1273,    0,    0,    0,    0, 1273,    0,
     1273, 1273, 1273, 1274,    0,    0, 1274,    0, 1274, 1274,

     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1275,    0, 1275, 1275, 1275,
        0,    0,    0, 1275, 1277,    0, 1277, 1277,    0, 1277,
        0,    0,    0, 1277, 1277,    0, 1277, 1277, 1277, 1278,
        0,    0, 1278,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1278, 1278, 1278, 1278, 1278, 1279, 1279,    0, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,

     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1280,    0,    0,
        0,    0,    0, 1280,    0, 1280, 1280, 1280, 1280, 1280,
        0,    0, 1280, 1280, 1280, 1280, 1280, 1280,    0,    0,
        0,    0, 1280, 1281,    0,    0,    0,    0,    0, 1281,
        0, 1281,    0, 1281, 1281, 1281,    0,    0, 1281, 1281,
     1281, 1281, 1281, 1281,    0,    0,    0,    0, 1281, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
     1282, 1283,    0, 1283, 1283,    0,    0,    0, 1283,    0,

     1283, 1283, 1283,    0,    0,    0,    0, 1283, 1284,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1284,    0, 1284, 1284, 1284,    0,    0,
        0,    0, 1284, 1285, 1285, 1285, 1285,    0,    0, 1285,
        0,    0,    0,    0,    0,    0,    0, 1285,    0,    0,
     1285,    0,    0,    0, 1285,    0, 1285, 1285, 1285,    0,
        0,    0, 1285, 1285, 1286, 1286, 1286, 1286,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1286,    0,
     1286, 1286, 1286,    0,    0, 1286,    0, 1286, 1286, 1286,
        0,    0,    0,    0, 1286, 1287, 1287, 1287, 1287,    0,

        0, 1287,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1287,    0, 1287, 1287,
     1287,    0,    0,    0,    0, 1287, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288,    0, 1288, 1288, 1288,
     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1289,    0,
     1289,    0,    0, 1289,    0, 1289, 1289, 1289,    0,    0,
        0,    0, 1289, 1290, 1290,    0, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1290, 1290, 1290, 1290, 1290, 1291,    0,    0,    0,    0,
        0, 1291,    0, 1291, 1291, 1291, 1291, 1291,    0,    0,
     1291, 1291, 1291, 1291, 1291, 1291,    0,    0,    0,    0,
     1291, 1292,    0,    0,    0,    0,    0, 1292,    0, 1292,
        0, 1292, 1292, 1292,    0,    0, 1292, 1292, 1292, 1292,
     1292, 1292,    0,    0,    0,    0, 1292, 1293, 1293,    0,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294,
     1294,    0, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,

     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1295, 1295,    0,    0,    0,    0,    0, 1295,    0,
     1295, 1295, 1295, 1295, 1295,    0, 1295, 1295, 1295, 1295,
     1295, 1295, 1295,    0,    0,    0,    0, 1295, 1296,    0,
        0,    0,    0,    0, 1296,    0, 1296,    0, 1296, 1296,
     1296,    0,    0, 1296, 1296, 1296, 1296, 1296, 1296,    0,
        0,    0,    0, 1296, 1297, 1297, 1297, 1297,    0,    0,
     1297,    0,    0,    0,    0,    0,    0,    0, 1297,    0,
        0, 1297,    0,    0,    0, 1297,    0, 1297, 1297, 1297,

        0,    0,    0, 1297, 1297, 1298, 1298, 1298, 1298,    0,
        0,    0,    0, 1298,    0,    0,    0,    0,    0, 1298,
        0, 1298, 1298,    0,    0,    0, 1298,    0, 1298, 1298,
     1298,    0,    0,    0,    0, 1298, 1299, 1299, 1299, 1299,
        0,    0, 1299,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1299,    0, 1299,
     1299, 1299,    0,    0,    0,    0, 1299, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300,    0, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1301,

        0,    0, 1301,    0,    0,    0,    0, 1301,    0,    0,
        0,    0,    0,    0,    0, 1301,    0,    0,    0,    0,
     1301,    0, 1301, 1301, 1301,    0,    0,    0,    0, 1301,
     1302,    0,    0, 1302,    0,    0,    0,    0, 1302,    0,
     1302, 1302, 1302,    0,    0,    0,    0, 1302, 1303, 1303,
        0, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303, 1303,
     1304, 1304,    0, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1305, 1305,    0, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1305, 1306,    0,    0,    0,    0,    0,
     1306,    0, 1306, 1306, 1306, 1306, 1306,    0,    0, 1306,
     1306, 1306, 1306, 1306, 1306,    0,    0,    0,    0, 1306,
     1307,    0,    0,    0,    0,    0, 1307,    0, 1307,    0,
     1307, 1307, 1307,    0,    0, 1307, 1307, 1307, 1307, 1307,
     1307,    0,    0,    0,    0, 1307, 1308, 1308, 1308, 1308,

        0,    0, 1308,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1308, 1308,    0,    0,    0, 1308,    0, 1308,
     1308, 1308,    0,    0,    0,    0, 1308, 1309,    0, 1309,
     1309, 1309,    0,    0,    0,    0, 1309, 1310, 1310, 1310,
     1310,    0,    0, 1310,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1310, 1310,    0,    0,    0, 1310,    0,
     1310, 1310, 1310,    0,    0,    0,    0, 1310, 1311, 1311,
     1311, 1311,    0,    0, 1311,    0,    0,    0,    0,    0,
        0,    0, 1311,    0,    0, 1311,    0,    0,    0, 1311,
        0, 1311, 1311, 1311,    0,    0,    0, 1311, 1311, 1312,

     1312, 1312, 1312,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1312,    0, 1312, 1312,    0,    0,    0,
     1312,    0, 1312, 1312, 1312,    0,    0,    0,    0, 1312,
     1313, 1313, 1313, 1313,    0,    0, 1313,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1313,    0, 1313, 1313, 1313,    0,    0,    0,    0,
     1313, 1314,    0,    0,    0,    0, 1314,    0, 1314, 1314,
     1314,    0,    0,    0,    0, 1314, 1315,    0, 1315,    0,
        0,    0,    0, 1315,    0, 1315, 1315, 1315,    0,    0,
        0,    0, 1315, 1316,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0, 1316,    0,
     1316, 1316, 1316,    0,    0,    0,    0, 1316, 1317, 1317,
        0, 1317,    0,    0,    0,    0, 1317,    0, 1317, 1317,
     1317,    0,    0,    0,    0, 1317, 1318, 1318,    0, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318,    0, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318,    0,
     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319,    0,
        0, 1319,    0,    0,    0,    0, 1319,    0, 1319, 1319,
     1319,    0,    0,    0,    0, 1319, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320,

     1320, 1320, 1320, 1320, 1320, 1320, 1320,    0, 1320, 1320,
     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1321, 1321,
        0, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,    0,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1322,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1322,    0, 1322, 1322, 1322,
        0,    0,    0,    0, 1322, 1323,    0,    0, 1323,    0,
        0,    0,    0, 1323,    0, 1323, 1323, 1323,    0,    0,
        0,    0, 1323, 1324, 1324,    0, 1324, 1324, 1324, 1324,

     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1325, 1325,    0, 1325,    0,
     1325, 1325, 1325, 1325, 1325, 1325,    0, 1325, 1325, 1325,
     1325,    0, 1325, 1325, 1325, 1325,    0, 1325,    0, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1326,    0,    0,
     1326,    0,    0,    0,    0, 1326,    0,    0,    0,    0,
     1326, 1326,    0, 1326,    0,    0,    0,    0, 1326,    0,
     1326, 1326, 1326, 1327, 1327,    0, 1327,    0, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,

     1327, 1327, 1327, 1327,    0, 1327,    0, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1328, 1328,    0, 1328,    0,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1328, 1328,    0, 1328,    0, 1328,
     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1329,    0,    0,
     1329,    0,    0,    0,    0, 1329,    0, 1329, 1329, 1329,
        0,    0,    0,    0, 1329, 1330, 1330,    0, 1330, 1330,
     1330, 1330, 1330, 1330,    0,    0, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330,    0, 1330,    0, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1331,    0, 1331,

     1331,    0,    0,    0, 1331,    0, 1331, 1331, 1331,    0,
        0,    0,    0, 1331, 1332,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1332,
        0, 1332, 1332, 1332,    0,    0,    0,    0, 1332, 1333,
        0, 1333, 1333,    0,    0,    0, 1333,    0, 1333, 1333,
     1333,    0,    0,    0,    0, 1333, 1334,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1334,    0, 1334, 1334, 1334,    0,    0,    0,    0,
     1334, 1335, 1335,    0, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335, 1335,

     1335, 1335,    0, 1335,    0, 1335, 1335, 1335, 1335, 1335,
     1335, 1335, 1335, 1336,    0,    0, 1336,    0,    0,    0,
        0, 1336,    0, 1336, 1336, 1336,    0,    0,    0,    0,
     1336, 1337, 1337,    0, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337,    0, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337,    0, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1338, 1338,    0, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338,    0, 1338, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338,    0, 1338,    0, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1338, 1340,    0, 1340, 1340, 1340,

     1340, 1340,    0,    0,    0, 1340,    0, 1340, 1340, 1340,
        0,    0,    0,    0, 1340, 1341,    0, 1341, 1341, 1341,
     1341, 1341,    0,    0,    0, 1341,    0, 1341, 1341, 1341,
        0,    0,    0,    0, 1341, 1342,    0, 1342, 1342, 1342,
     1342, 1342,    0,    0,    0, 1342,    0, 1342, 1342, 1342,
        0,    0,    0,    0, 1342, 1343,    0, 1343, 1343, 1343,
     1343, 1343,    0,    0,    0, 1343,    0, 1343, 1343, 1343,
        0,    0,    0,    0, 1343, 1344, 1344,    0, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,    0, 1344,

     1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345,    0,    0, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346,
     1346,    0,    0,    0, 1346,    0, 1346, 1346, 1346,    0,
        0,    0,    0, 1346, 1347, 1347,    0, 1347, 1347, 1347,
     1347,    0, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1348, 1348,    0, 1348,
        0,    0,    0,    0, 1348,    0, 1348, 1348, 1348, 1349,

        0, 1349, 1349,    0, 1349,    0,    0,    0, 1349, 1349,
        0, 1349, 1349, 1349, 1350,    0,    0, 1350,    0, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1351, 1351,    0, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352,    0,
        0, 1352,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1352,

        0, 1352, 1352, 1352, 1354,    0,    0, 1354,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1354,    0, 1354, 1354, 1354,
     1355, 1355,    0, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,    0,
     1355, 1355, 1358,    0,    0, 1358,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1358, 1358, 1358, 1358, 1358, 1359,    0,
        0,    0,    0,    0, 1359,    0, 1359, 1359, 1359, 1359,

     1359,    0,    0, 1359, 1359, 1359, 1359, 1359, 1359,    0,
        0,    0,    0, 1359, 1360,    0,    0,    0,    0,    0,
     1360,    0, 1360, 1360, 1360, 1360, 1360,    0,    0, 1360,
     1360, 1360, 1360, 1360, 1360,    0,    0,    0,    0, 1360,
     1361,    0, 1361, 1361, 1361,    0,    0,    0,    0, 1361,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,
     1362, 1362, 1363,    0, 1363,    0,    0, 1363,    0, 1363,
     1363, 1363,    0,    0,    0,    0, 1363, 1364,    0,    0,

        0,    0,    0, 1364,    0, 1364, 1364, 1364, 1364, 1364,
        0,    0, 1364, 1364, 1364, 1364, 1364, 1364,    0,    0,
        0,    0, 1364, 1365,    0,    0,    0,    0,    0, 1365,
        0, 1365, 1365, 1365, 1365, 1365,    0,    0, 1365, 1365,
     1365, 1365, 1365, 1365,    0,    0,    0,    0, 1365, 1366,
     1366,    0, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1367, 1367,    0,    0,    0,    0,    0, 1367,    0,
     1367, 1367, 1367, 1367, 1367,    0, 1367, 1367, 1367, 1367,

     1367, 1367, 1367,    0,    0,    0,    0, 1367, 1368, 1368,
        0,    0,    0,    0,    0, 1368,    0, 1368, 1368, 1368,
     1368, 1368,    0, 1368, 1368, 1368, 1368, 1368, 1368, 1368,
        0,    0,    0,    0, 1368, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1369, 1369, 1369, 1370,    0,    0,
     1370,    0,    0,    0,    0, 1370,    0,    0,    0,    0,
        0,    0,    0, 1370,    0,    0,    0,    0, 1370,    0,
     1370, 1370, 1370,    0,    0,    0,    0, 1370, 1371,    0,

        0,    0,    0,    0, 1371,    0, 1371, 1371, 1371, 1371,
     1371,    0,    0, 1371, 1371, 1371, 1371, 1371, 1371,    0,
        0,    0,    0, 1371, 1372,    0,    0,    0,    0,    0,
     1372,    0, 1372, 1372, 1372, 1372, 1372,    0,    0, 1372,
     1372, 1372, 1372, 1372, 1372,    0,    0,    0,    0, 1372,
     1373, 1373, 1373, 1373,    0,    0, 1373,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1373, 1373,    0,    0,
        0, 1373,    0, 1373, 1373, 1373,    0,    0,    0,    0,
     1373, 1374, 1374, 1374, 1374,    0,    0, 1374,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1374,    0,

        0,    0, 1374,    0, 1374, 1374, 1374,    0,    0,    0,
        0, 1374, 1375, 1375, 1375, 1375,    0,    0, 1375,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1375, 1375,
        0,    0,    0, 1375,    0, 1375, 1375, 1375,    0,    0,
        0,    0, 1375, 1376,    0,    0,    0,    0, 1376,    0,
     1376, 1376, 1376,    0,    0,    0,    0, 1376, 1377,    0,
     1377, 1377, 1377,    0,    0,    0,    0, 1377, 1378,    0,
     1378,    0,    0,    0,    0, 1378,    0, 1378, 1378, 1378,
        0,    0,    0,    0, 1378, 1379,    0, 1379, 1379, 1379,
        0,    0,    0,    0, 1379, 1380,    0,    0,    0,    0,

     1380,    0, 1380, 1380, 1380,    0,    0,    0,    0, 1380,
     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1381, 1381, 1381, 1381, 1381,    0, 1381, 1381,
     1381, 1381,    0, 1381,    0,    0, 1381, 1381, 1381, 1381,
     1381, 1381, 1382,    0, 1382, 1382, 1382,    0,    0,    0,
        0, 1382, 1383,    0, 1383, 1383, 1383,    0,    0,    0,
        0, 1383, 1385, 1385,    0, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1385, 1386,    0,    0, 1386,    0,    0,

        0,    0, 1386,    0, 1386, 1386, 1386, 1387,    0, 1387,
        0, 1387, 1387,    0, 1387,    0,    0,    0, 1387, 1387,
        0, 1387, 1387, 1387, 1388, 1388,    0, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1390,    0,    0, 1390,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 1390,    0, 1390,
     1390, 1390, 1391, 1391,    0, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,

     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1392, 1392, 1392, 1392, 1392, 1393,
        0,    0, 1393,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1393, 1393, 1393, 1393, 1393, 1394, 1394,    0, 1394,    0,
        0,    0,    0,    0,    0,    0, 1394,    0, 1394, 1394,
        0, 1394, 1394,    0,    0, 1394, 1394,    0, 1394, 1394,
     1394,    0, 1394, 1395,    0,    0,    0,    0,    0, 1395,
        0, 1395, 1395, 1395, 1395, 1395,    0,    0, 1395, 1395,
     1395, 1395, 1395, 1395,    0,    0,    0,    0, 1395, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1397,    0,    0,    0,    0,    0, 1397,    0, 1397,
     1397, 1397, 1397, 1397,    0,    0, 1397, 1397, 1397, 1397,
     1397, 1397,    0,    0,    0,    0, 1397, 1398, 1398,    0,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399,
     1399,    0,    0,    0,    0,    0, 1399,    0, 1399, 1399,

     1399, 1399, 1399,    0, 1399, 1399, 1399, 1399, 1399, 1399,
     1399,    0,    0,    0,    0, 1399, 1400,    0,    0,    0,
        0,    0, 1400,    0, 1400, 1400, 1400, 1400, 1400,    0,
        0, 1400, 1400, 1400, 1400, 1400, 1400,    0,    0,    0,
        0, 1400, 1401,    0, 1401, 1401, 1401,    0,    0,    0,
        0, 1401, 1402, 1402, 1402, 1402,    0,    0, 1402,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1402, 1402,
        0,    0,    0, 1402,    0, 1402, 1402, 1402,    0,    0,
        0,    0, 1402, 1403, 1403, 1403, 1403,    0,    0, 1403,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1403,    0,    0,    0, 1403,    0, 1403, 1403, 1403,    0,
        0,    0,    0, 1403, 1404,    0, 1404,    0,    0,    0,
        0, 1404,    0, 1404, 1404, 1404,    0,    0,    0,    0,
     1404, 1405,    0,    0,    0,    0, 1405,    0, 1405, 1405,
     1405,    0,    0,    0,    0, 1405, 1406, 1406,    0, 1406,
        0,    0,    0,    0, 1406,    0, 1406, 1406, 1406, 1407,
     1407,    0, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,

     1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1408,    0, 1408,    0,    0,    0, 1408, 1408,
     1408, 1408, 1408, 1409, 1409, 1409, 1409,    0,    0, 1409,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1409,
     1409,    0,    0,    0, 1409,    0, 1409, 1409, 1409,    0,
        0,    0,    0, 1409, 1410, 1410, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410, 1410,
     1410,    0, 1410, 1410, 1410, 1410,    0, 1410,    0, 1410,
        0, 1410, 1410, 1410, 1410, 1410, 1411, 1411,    0, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,

     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411,
     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
     1412, 1412, 1412, 1412, 1412,    0, 1412, 1412, 1412, 1412,
        0, 1412,    0,    0,    0, 1412, 1412, 1412, 1412, 1412,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413,    0, 1413, 1413,
     1413, 1413,    0, 1413,    0,    0,    0, 1413, 1413, 1413,
     1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
     1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1414,    0,

     1414, 1414, 1414, 1414,    0, 1414,    0,    0,    0, 1414,
     1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415, 1415, 1415,
     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1415,
     1415,    0, 1415, 1415, 1415, 1415,    0, 1415,    0,    0,
        0, 1415, 1415, 1415, 1415, 1415, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181
    } ;

extern int commentscanYY_flex_debug;
int commentscanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentscanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2014 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"
#include "markdown.h"
#include "condparser.h"
#include "formula.h"

#define YY_NO_INPUT 1

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleToc(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);
static bool handleCopyDoc(const QCString &);
static bool handleCopyBrief(const QCString &);
static bool handleCopyDetails(const QCString &);
static bool handleParBlock(const QCString &);
static bool handleEndParBlock(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "parblock",        &handleParBlock,         TRUE  },
  { "endparblock",     &handleEndParBlock,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             FALSE },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE  },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "docbookonly",     &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "startuml",        &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "tableofcontents", &handleToc,              FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         &handleCopyDoc,          TRUE  },
  { "copybrief",       &handleCopyBrief,        FALSE },
  { "copydetails",     &handleCopyDetails,      TRUE  },
  { "copyright",       0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "latexinclude",    0,                       FALSE },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  err("DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
bool inInternalDocs = FALSE;
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         g_sectionLabel;
static QCString		g_sectionTitle;
static int              g_sectionLevel;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;

static int              g_commentCount;
static QCString         g_spaceBeforeCmd;
static QCString         g_spaceBeforeIf;
static QCString         g_copyDocArg;

static QCString         g_guardExpr;
static int              g_roundCount;

static bool             g_insideParBlock;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  g_sectionLabel.resize(0);
  g_sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
  g_insideParBlock = FALSE;
}

//-----------------------------------------------------------------------------

static bool getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:
    case Entry::STRUCTDOC_SEC:
    case Entry::UNIONDOC_SEC:
    case Entry::EXCEPTIONDOC_SEC:
    case Entry::NAMESPACEDOC_SEC:
    case Entry::PROTOCOLDOC_SEC:
    case Entry::CATEGORYDOC_SEC:
    case Entry::ENUMDOC_SEC:
    case Entry::PAGEDOC_SEC:
    case Entry::VARIABLEDOC_SEC:
    case Entry::MEMBERDOC_SEC:
    case Entry::OVERLOADDOC_SEC:
    case Entry::FILEDOC_SEC:
    case Entry::DEFINEDOC_SEC:
    case Entry::GROUPDOC_SEC:
    case Entry::MAINPAGEDOC_SEC:
    case Entry::PACKAGEDOC_SEC:
    case Entry::DIRDOC_SEC:
    case Entry::EXAMPLE_SEC:
    case Entry::MEMBERGRP_SEC:
      return TRUE;
    default: 
      return FALSE;
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (getDocSectionName(current->section))
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentscanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (qstrcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    if (Doxygen::markdownSupport)
    {
      item->text += processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text += outputXRef;
    }
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    if (Doxygen::markdownSupport)
    {
      item->text = processMarkdown(yyFileName,yyLineNr,current,outputXRef);
    }
    else
    {
      item->text = outputXRef;
    }
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si = Doxygen::sectionDict->find(anchorLabel);
    if (si)
    {
      if (si->lineNr != -1)
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s, line %d)",anchorLabel,si->fileName.data(),si->lineNr);
      }
      else
      {
        warn(listName,yyLineNr,"multiple use of section label '%s', (first occurrence: %s)",anchorLabel,si->fileName.data());
      }
    }
    else
    {
      si=new SectionInfo(listName,yyLineNr,anchorLabel,
                         g_sectionTitle,SectionInfo::Anchor,
                         g_sectionLevel);
      Doxygen::sectionDict->append(anchorLabel,si);
      docEntry->anchors->append(si);
    }
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict->find(fText))==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList->append(f);
    Doxygen::formulaDict->insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict->insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="@_fakenl"; // add fake newlines to
                                                         // keep the warnings 
                                                         // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static SectionInfo::SectionType sectionLevelToType(int level)
{
  if (level>=0 && level<5) return (SectionInfo::SectionType)level;
  return SectionInfo::Anchor;
}

static void addSection()
{
  SectionInfo *si = Doxygen::sectionDict->find(g_sectionLabel);
  if (si)
  {
    if (si->lineNr != -1)
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s, line %d)",g_sectionLabel.data(),si->fileName.data(),si->lineNr);
    }
    else
    {
      warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding section, (first occurrence: %s)",g_sectionLabel.data(),si->fileName.data());
    }
  }
  else
  {
    // create a new section element
    g_sectionTitle+=commentscanYYtext;
    g_sectionTitle=g_sectionTitle.stripWhiteSpace();
    si = new SectionInfo(yyFileName,yyLineNr,g_sectionLabel,
                          g_sectionTitle,sectionLevelToType(g_sectionLevel),g_sectionLevel);

    // add section to this entry
    current->anchors->append(si);

    // add section to the global dictionary
    Doxygen::sectionDict->append(g_sectionLabel,si);
  }
}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentscanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string up to and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  //printf("addOutput(%s)\n",s);
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentscanYYtext);
  }
}

static void handleGuard(const QCString &expr);
/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */









































#line 4145 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39
#define CopyDoc 40
#define GuardExpr 41

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentscanYYlex_destroy (void );

int commentscanYYget_debug (void );

void commentscanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentscanYYget_extra (void );

void commentscanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentscanYYget_in (void );

void commentscanYYset_in  (FILE * in_str  );

FILE *commentscanYYget_out (void );

void commentscanYYset_out  (FILE * out_str  );

int commentscanYYget_leng (void );

char *commentscanYYget_text (void );

int commentscanYYget_lineno (void );

void commentscanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentscanYYwrap (void );
#else
extern int commentscanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( commentscanYYtext, commentscanYYleng, 1, commentscanYYout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentscanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentscanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentscanYYin))==0 && ferror(commentscanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentscanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentscanYYlex (void);

#define YY_DECL int commentscanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentscanYYtext and commentscanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentscanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentscanYYtext[commentscanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 972 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail address (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 4391 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentscanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentscanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentscanYYin )
			commentscanYYin = stdin;

		if ( ! commentscanYYout )
			commentscanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentscanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
		}

		commentscanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentscanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1182 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9947 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 991 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 994 "commentscan.l"
{ // escaped command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 997 "commentscan.l"
{ // mail address
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 1000 "commentscan.l"
{ // quoted text
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 1003 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 1006 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 1023 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 1028 "commentscan.l"
{ // HTML command that ends a brief description
					  if (current->lang==SrcLangExt_CSharp)
                                          {
                                            setOutput(OutputDoc);
                                          }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 1036 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 1040 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 1044 "commentscan.l"
{ // start of a .NET XML style detailed description
                                          addOutput(commentscanYYtext);
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 1048 "commentscan.l"
{ // end of a brief or detailed description
                                          addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 1051 "commentscan.l"
{
                                          insidePre=TRUE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 1055 "commentscan.l"
{
                                          insidePre=FALSE;
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 1059 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 1063 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1066 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
                                          if (!inInternalDocs)
  					    warn(yyFileName,yyLineNr,
                                               "found \\endinternal without matching \\internal"
                                              );
                                          inInternalDocs = FALSE;
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1074 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentscanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
                                            int i=0;
                                            while (commentscanYYtext[i]==' ' || commentscanYYtext[i]=='\t') i++;
					    g_spaceBeforeCmd = QCString(commentscanYYtext).left(i);
					    if (cmdPtr->endsBrief && inContext!=OutputXRef) 
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
                                            //if (i>0) addOutput(QCString(commentscanYYtext).left(i)); // removed for bug 689341
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);
#else
					      inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf);
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentscanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentscanYYtext);
					  }
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1120 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1123 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentscanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      qstricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1131 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentscanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1143 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1148 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 1153 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1157 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + (int)(yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf) + strlen(commentscanYYtext);
#else
				          inputPosition=prevPosition + (int)(yy_bp - yy_current_buffer->yy_ch_buf) + strlen(commentscanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1170 "commentscan.l"
{ // escaped character
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1173 "commentscan.l"
{ // normal word
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 28:
/* rule 28 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1176 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentscanYYtext); 
					}
	YY_BREAK
case 29:
#line 1180 "commentscan.l"
case 30:
YY_RULE_SETUP
#line 1180 "commentscan.l"
{ // start of autolist
                                          if (!Doxygen::markdownSupport)
                                          {
                                            REJECT;
                                          }
                                          else
                                          {
                                            if (inContext!=OutputXRef) 
                                            {
                                              briefEndsAtDot=FALSE;
                                              setOutput(OutputDoc);
                                            }
                                            addOutput(commentscanYYtext); 
                                          }
  					}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 1195 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentscanYYtext); 
  					}
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1203 "commentscan.l"
{ // horizontal line (dashed)
  				          addOutput(commentscanYYtext); 
                                        }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 1206 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1209 "commentscan.l"
{ // escaped mdash
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 1212 "commentscan.l"
{ // mdash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&mdash;");
                                        }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 1215 "commentscan.l"
{ // ndash
                                          addOutput(insidePre || Doxygen::markdownSupport ? commentscanYYtext : "&ndash;");
                                        }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1218 "commentscan.l"
{ // numbered item
                                          addOutput(commentscanYYtext);
                                        }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1221 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 1224 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentscanYYtext[0]);
  					  addOutput(commentscanYYtext[2]);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1228 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1231 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 42:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1234 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1237 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    if (!g_insideParBlock) setOutput(OutputDoc);
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					  }
					  else if (inContext!=OutputBrief)
					  {
                                            int i;
                                            for (i=0;i<commentscanYYleng;)
                                            {
                                              if (commentscanYYtext[i]=='\n') addOutput('\n'),i++;
                                              else if (strcmp(commentscanYYtext+i,"\\_linebr")==0) addOutput('\n'),i+=8;
                                              else i++;
                                            }
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1268 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentscanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1276 "commentscan.l"
{ // newline
  					  addOutput(*commentscanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 1280 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 47:
YY_RULE_SETUP
#line 1287 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 1288 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 1291 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 1293 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 51:
YY_RULE_SETUP
#line 1298 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1303 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 1308 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 1314 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentscanYYtext; 
 					} 
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1317 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentscanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1322 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentscanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1328 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1332 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1336 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 1344 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 1349 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
#line 1353 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1357 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 1366 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 65:
YY_RULE_SETUP
#line 1371 "commentscan.l"
{ // handle argument
  					  current->name = commentscanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 1375 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1379 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 1388 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 1393 "commentscan.l"
{ 
  					  current->name = substitute(removeRedundantWhiteSpace(commentscanYYtext),".","::");
					  BEGIN( ClassDocArg2 );
                                        }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 1397 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentscanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1406 "commentscan.l"
{
  					  current->name = substitute(commentscanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1410 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1414 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1423 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 1426 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentscanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 1430 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1434 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 1439 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1442 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentscanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1446 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1450 "commentscan.l"
{ 
  					  if (*commentscanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1454 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 83:
YY_RULE_SETUP
#line 1459 "commentscan.l"
{ // group name
  					  current->name = commentscanYYtext;
					  //lastDefGroup.groupname = commentscanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 1471 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 1475 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1484 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 1488 "commentscan.l"
{ // title (stored in type)
					  current->type += commentscanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 1492 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 89:
YY_RULE_SETUP
#line 1509 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1513 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1516 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "missing argument after "
					       "\\page."
                                              );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1525 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 1527 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentscanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1536 "commentscan.l"
{ // no file name specfied
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 1541 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentscanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 1545 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 1548 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 98:
YY_RULE_SETUP
#line 1553 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentscanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1558 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 1562 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "Missing first argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 1571 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 1574 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentscanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 1578 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 1582 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing second argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 1591 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1594 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentscanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 1599 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 1603 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing third argument of \\xrefitem"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 1612 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 110:
YY_RULE_SETUP
#line 1618 "commentscan.l"
{ // argument
  					  current->relates = commentscanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentscanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 1626 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 1630 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1638 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 1644 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1649 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 1653 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 117:
YY_RULE_SETUP
#line 1659 "commentscan.l"
{ // first argyment
  					  g_sectionLabel=commentscanYYtext;
                                          addOutput(commentscanYYtext);
					  g_sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 1665 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\section command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 1673 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1679 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 121:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1684 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 1689 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1693 "commentscan.l"
{ // any character without special meaning
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 1697 "commentscan.l"
{ // unescape escaped command
  					  g_sectionTitle+=&commentscanYYtext[1];
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1701 "commentscan.l"
{ // unescape escaped character
  					  g_sectionTitle+=commentscanYYtext[1];
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1705 "commentscan.l"
{ // anything else
  					  g_sectionTitle+=commentscanYYtext;
					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 127:
YY_RULE_SETUP
#line 1712 "commentscan.l"
{ // first argument
                                          addOutput(commentscanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentscanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 128:
/* rule 128 can match eol */
YY_RULE_SETUP
#line 1719 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\subpage command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1727 "commentscan.l"
{ // no title, end command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 1731 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1735 "commentscan.l"
{ // no title, end of command
  					  unput(*commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 132:
YY_RULE_SETUP
#line 1742 "commentscan.l"
{ // found argument
                                          SectionInfo *si = Doxygen::sectionDict->find(commentscanYYtext);
                                          if (si)
                                          {
                                            if (si->lineNr != -1)
                                            {
                                              warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s, line %d)",commentscanYYtext,si->fileName.data(),si->lineNr);
                                            }
                                            else
                                            {
                                              warn(yyFileName,yyLineNr,"multiple use of section label '%s' while adding anchor, (first occurrence: %s)",commentscanYYtext,si->fileName.data());
                                            }
                                          }
                                          else
                                          {
                                            si = new SectionInfo(yyFileName,yyLineNr,commentscanYYtext,0,SectionInfo::Anchor,0);
                                            Doxygen::sectionDict->append(commentscanYYtext,si);
  					    current->anchors->append(si);
                                          }
					  addOutput(commentscanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 1764 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\anchor command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1772 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1782 "commentscan.l"
{ // possible ends
  					  addOutput(commentscanYYtext);
					  if (&commentscanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 1789 "commentscan.l"
{
  					  addOutput(commentscanYYtext);
					  if (blockName=="startuml") // found end of the block
					  {
  					    BEGIN(Comment);
					  }
                                        }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 1796 "commentscan.l"
{ // some word
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 1799 "commentscan.l"
{ // new line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 1803 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 1807 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentscanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1816 "commentscan.l"
{
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1819 "commentscan.l"
{
                                          QCString endTag = "@end"+blockName;
                                          if (blockName=="startuml") endTag="enduml";
                                          warn(yyFileName,yyLineNr,
	                                    "reached end of comment while inside a @%s block; check for missing @%s tag!",
	                                    blockName.data(),endTag.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 142:
YY_RULE_SETUP
#line 1831 "commentscan.l"
{
                                          g_guardExpr=commentscanYYtext;
                                          g_roundCount=1;
                                          BEGIN(GuardExpr);
                                        }
	YY_BREAK
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1836 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                        }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 1839 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount++;
                                        }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 1843 "commentscan.l"
{
                                          g_guardExpr+=commentscanYYtext;
                                          g_roundCount--;
                                          if (g_roundCount==0)
                                          {
                                            handleGuard(g_guardExpr);
                                          }
                                        }
	YY_BREAK
case 146:
/* rule 146 can match eol */
YY_RULE_SETUP
#line 1851 "commentscan.l"
{
					  warn(yyFileName,yyLineNr,
						"invalid expression '%s' for guard",g_guardExpr.data());
                                          unput(*commentscanYYtext);
                                          BEGIN(GuardParam);
                                        }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 1857 "commentscan.l"
{ // parameter of if/ifnot guard
                                          handleGuard(commentscanYYtext);
  					}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 1860 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 1866 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 1870 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
case 151:
/* rule 151 can match eol */
YY_RULE_SETUP
#line 1873 "commentscan.l"
{
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1877 "commentscan.l"
{
  					  if (!g_spaceBeforeIf.isEmpty()) // needed for 665313 in combation with bug620924
					  {
					    addOutput(g_spaceBeforeIf);
					  }
  					  g_spaceBeforeIf.resize(0);
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1885 "commentscan.l"
{
  					  unput(*commentscanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 154:
/* rule 154 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1892 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1896 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 156:
/* rule 156 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1900 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @endif without matching start command");
					  }
					  else
					  {
					    GuardedSection *s = guards.pop();
                                            bool parentVisible = s->parentVisible();
                                            delete s;
                                            if (parentVisible)
                                            {
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
                                            }
					  }
  					}
	YY_BREAK
case 157:
/* rule 157 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1918 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 158:
/* rule 158 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1935 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
                                              guardType=Guard_If;
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1951 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1955 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 1957 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1963 "commentscan.l"
{ // skip line
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 163:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1967 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 164:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1970 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 165:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1973 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 166:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1981 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 167:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1988 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 168:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 1995 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 169:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentscanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentscanYYtext again */
YY_RULE_SETUP
#line 2002 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 2009 "commentscan.l"
{
                                          addOutput("\\endinternal "); 
					  BEGIN(Comment);
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 2013 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 2015 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 173:
/* rule 173 can match eol */
YY_RULE_SETUP
#line 2021 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 2026 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 2031 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentscanYYtext;
					  current->name+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 176:
YY_RULE_SETUP
#line 2038 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentscanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 2044 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 2055 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 2059 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentscanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 2065 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentscanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 2074 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 2078 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentscanYYtext;
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 2081 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 2085 "commentscan.l"
{
                                          functionProto+=commentscanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 2089 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 186:
/* rule 186 can match eol */
YY_RULE_SETUP
#line 2097 "commentscan.l"
{ // end of argument
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					    addOutput('\n');
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 2111 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 2115 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentscanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 189:
YY_RULE_SETUP
#line 2121 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 2127 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\inherit command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 2135 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 192:
YY_RULE_SETUP
#line 2144 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentscanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 2150 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\extends or \\implements command has no argument"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 2158 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 195:
YY_RULE_SETUP
#line 2163 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentscanYYtext[2];
				     if (langId.isEmpty() ||
					 qstricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 2171 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 197:
/* rule 197 can match eol */
YY_RULE_SETUP
#line 2173 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentscanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 2176 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 199:
YY_RULE_SETUP
#line 2181 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentscanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 2186 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "\\cite command has no label"
					      );
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 2194 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of the copydoc command ------- */
case YY_STATE_EOF(CopyDoc):
#line 2203 "commentscan.l"
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 2204 "commentscan.l"
{
  					  if (*commentscanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  setOutput(OutputDoc);
                                          addOutput("\\copydetails ");
					  addOutput(g_copyDocArg);
					  addOutput("\n");
					  BEGIN(Comment);
  					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 2213 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 2217 "commentscan.l"
{
  					  g_copyDocArg+=commentscanYYtext;
					  addOutput(commentscanYYtext);
  					}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 2223 "commentscan.l"
ECHO;
	YY_BREAK
#line 6621 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
			case YY_STATE_EOF(GuardExpr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentscanYYin at a new source and called
			 * commentscanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentscanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentscanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentscanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentscanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentscanYYrestart(commentscanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentscanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1182 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1182 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1181);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentscanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentscanYYrestart(commentscanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentscanYYwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentscanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentscanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentscanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentscanYY_create_buffer(commentscanYYin,YY_BUF_SIZE );
	}

	commentscanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentscanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentscanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentscanYYpop_buffer_state();
	 *		commentscanYYpush_buffer_state(new_buffer);
     */
	commentscanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentscanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentscanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentscanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentscanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentscanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentscanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentscanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentscanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentscanYY_create_buffer()
 * 
 */
    void commentscanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentscanYYfree((void *) b->yy_ch_buf  );

	commentscanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentscanYYrestart() or at EOF.
 */
    static void commentscanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentscanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentscanYY_init_buffer was _probably_
     * called from commentscanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentscanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentscanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentscanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentscanYYensure_buffer_stack();

	/* This block is copied from commentscanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentscanYY_switch_to_buffer. */
	commentscanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentscanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentscanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentscanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentscanYYensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentscanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentscanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentscanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentscanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentscanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentscanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentscanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentscanYY_scan_string (yyconst char * yystr )
{
    
	return commentscanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentscanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentscanYY_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentscanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentscanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentscanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentscanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentscanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentscanYYtext[commentscanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentscanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentscanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentscanYYget_lineno  (void)
{
        
    return commentscanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentscanYYget_in  (void)
{
        return commentscanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentscanYYget_out  (void)
{
        return commentscanYYout;
}

/** Get the length of the current token.
 * 
 */
int commentscanYYget_leng  (void)
{
        return commentscanYYleng;
}

/** Get the current token.
 * 
 */

char *commentscanYYget_text  (void)
{
        return commentscanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentscanYYset_lineno (int  line_number )
{
    
    commentscanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentscanYY_switch_to_buffer
 */
void commentscanYYset_in (FILE *  in_str )
{
        commentscanYYin = in_str ;
}

void commentscanYYset_out (FILE *  out_str )
{
        commentscanYYout = out_str ;
}

int commentscanYYget_debug  (void)
{
        return commentscanYY_flex_debug;
}

void commentscanYYset_debug (int  bdebug )
{
        commentscanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentscanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentscanYYin = stdin;
    commentscanYYout = stdout;
#else
    commentscanYYin = (FILE *) 0;
    commentscanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentscanYYlex_init()
     */
    return 0;
}

/* commentscanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentscanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentscanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentscanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentscanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentscanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentscanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentscanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentscanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentscanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentscanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 2223 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  newXRefKind = XRef_Item;
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleParBlock(const QCString &)
{
  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\parblock command while already in a parblock!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@parblock ");
  g_insideParBlock = TRUE;
  return FALSE;
}

static bool handleEndParBlock(const QCString &)
{
  if (!g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"found \\endparblock command without matching \\parblock!");
  }
  addOutput("@endparblock");
  setOutput(OutputDoc); // to end a parblock inside a xrefitem like context
  g_insideParBlock = FALSE;
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput("@refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput("@"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"found \\subpage command in a comment block that is not marked as a page!");
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput("@"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("@"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput("@"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput("@addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  g_spaceBeforeIf = g_spaceBeforeCmd;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
    inInternalDocs = TRUE;
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleToc(const QCString &)
{
  if (current->section==Entry::PAGEDOC_SEC || 
      current->section==Entry::MAINPAGEDOC_SEC)
  {
    current->stat=TRUE;  // we 'abuse' stat to pass whether or the TOC is enabled
  }
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

static bool handleCopyBrief(const QCString &)
{
  if (current->brief.isEmpty() && current->doc.isEmpty())
  { // if we don't have a brief or detailed description yet,
    // then the @copybrief should end up in the brief description.
    // otherwise it will be copied inline (see bug691315 & bug700788)
    setOutput(OutputBrief);
  }
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  return FALSE;
}

static bool handleCopyDetails(const QCString &)
{
  setOutput(OutputDoc);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copydetails ");
  return FALSE;
}

static bool handleCopyDoc(const QCString &)
{
  setOutput(OutputBrief);
  if (!g_spaceBeforeCmd.isEmpty()) 
  {
    addOutput(g_spaceBeforeCmd);
    g_spaceBeforeCmd.resize(0);
  }
  addOutput("\\copybrief ");
  g_copyDocArg.resize(0);
  BEGIN(CopyDoc);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;
  g_spaceBeforeCmd.resize(0);
  g_spaceBeforeIf.resize(0);

  printlex(commentscanYY_flex_debug, TRUE, __FILE__, fileName ? fileName.data(): NULL);
  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[\n%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentscanYYrestart( commentscanYYin );
  BEGIN( Comment );
  commentscanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  if (g_insideParBlock)
  {
    warn(yyFileName,yyLineNr,
	"Documentation block ended while inside a \\parblock. Missing \\endparblock");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc,current->docLine);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  if (Doxygen::markdownSupport)
  {
    current->brief      = processMarkdown(fileName,lineNr,current,current->brief);
    current->doc        = processMarkdown(fileName,lineNr,current,current->doc);
    current->inbodyDocs = processMarkdown(fileName,lineNr,current,current->inbodyDocs);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[line=%d\n%s]\ndocs=[line=%d\n%s]\ninbody=[line=%d\n%s]\n===========\n",
	       current->briefLine,current->brief.data(),
               current->docLine,current->doc.data(),
               current->inbodyLine,current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d newEntryNeeded=%d\n",
  //  position,parseMore,newEntryNeeded);

  printlex(commentscanYY_flex_debug, FALSE, __FILE__, fileName ? fileName.data(): NULL);
  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	qstricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return (int)di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc,e->docLine);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}

static void handleGuard(const QCString &expr)
{
  CondParser prs;
  bool sectionEnabled=prs.parse(yyFileName,yyLineNr,expr.stripWhiteSpace());
  bool parentEnabled = TRUE;
  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
  if (parentEnabled)
  {
    if (
        (sectionEnabled && guardType==Guard_If) ||  
        (!sectionEnabled && guardType==Guard_IfNot)
       ) // section is visible
    {
      guards.push(new GuardedSection(TRUE,TRUE));
      enabledSectionFound=TRUE;
      BEGIN( GuardParamEnd );
    }
    else // section is invisible
    {
      if (guardType!=Guard_Skip)
      {
        guards.push(new GuardedSection(FALSE,TRUE));
      }
      BEGIN( SkipGuardedSection );
    }
  }
  else // invisible because of parent
  {
    guards.push(new GuardedSection(FALSE,FALSE));
    BEGIN( SkipGuardedSection );
  }
}



#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentscanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


